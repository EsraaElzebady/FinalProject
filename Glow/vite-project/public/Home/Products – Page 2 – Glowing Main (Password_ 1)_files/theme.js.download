(function(){var __webpack_modules__={"./src/js/components/animation.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.animation = {\n    delay: 100,\n    itemQueue: [],\n    queueTimer: null,\n    $wrapper: null,\n    init: function () {\n      var _self = this;\n      _self.$wrapper = $('body');\n      _self.itemQueue = [];\n      _self.queueTimer = null;\n      _self.itemQueue[\"animated_0\"] = [];\n      _self.$wrapper.find('#main').find('>div,>section').each(function (index) {\n        $(this).attr('data-animated-id', index + 1);\n        _self.itemQueue[\"animated_\" + (index + 1)] = [];\n      });\n      setTimeout(function () {\n        _self.registerAnimation();\n      }, 200);\n    },\n    registerAnimation: function () {\n      var _self = this;\n      $('[data-animate]:not(.animate__animated)', _self.$wrapper).waypoint(function () {\n        // Fix for different ver of waypoints plugin.\n        var _el = this.element ? this.element : this,\n          $this = $(_el);\n        if ($this.is(\":visible\")) {\n          var $animated_wrap = $this.closest(\"[data-animated-id]\"),\n            animated_id = '0';\n          if ($animated_wrap.length) {\n            animated_id = $animated_wrap.data('animated-id');\n          }\n          _self.itemQueue['animated_' + animated_id].push(_el);\n          _self.processItemQueue();\n        } else {\n          $this.addClass('animate__' + $this.data('animate')).addClass('animate__animated');\n        }\n      }, {\n        offset: '100%',\n        triggerOnce: true\n      });\n    },\n    processItemQueue: function () {\n      var _self = this;\n      if (_self.queueTimer) return; // We're already processing the queue\n      _self.queueTimer = window.setInterval(function () {\n        var has_queue = false;\n        for (let animated_id in _self.itemQueue) {\n          if (_self.itemQueue[animated_id].length) {\n            has_queue = true;\n            break;\n          }\n        }\n        if (has_queue) {\n          for (let animated_id in _self.itemQueue) {\n            var $item = $(_self.itemQueue[animated_id].shift());\n            $item.addClass('animate__' + $item.data('animate')).addClass('animate__animated');\n          }\n          _self.processItemQueue();\n        } else {\n          window.clearInterval(_self.queueTimer);\n          _self.queueTimer = null;\n        }\n      }, _self.delay);\n    }\n  };\n  GSP.slickSlider = {\n    init: function () {\n      var _that = this;\n      _that.initSlick();\n      _that.slickSetup();\n      _that.beforeChange();\n      _that.afterChange();\n      document.addEventListener('shopify:section:load', function (event) {\n        GSP.slickSlider.slickSetup($(event.target));\n      });\n      document.addEventListener('shopify:block:select', function (event) {\n        const slider = event.target.closest('.slick-slider.slick-initialized');\n        if (slider) {\n          const slickItem = event.target.closest('.slick-slide');\n          const index = slickItem.dataset.slickIndex;\n          if (index !== undefined) {\n            _that.slickGoTo(slider, index);\n          }\n        }\n      });\n    },\n    slickSetup: function ($wrap) {\n      var $slicks;\n      var $that = this;\n      if ($wrap !== undefined) {\n        $slicks = $wrap.find('.slick-slider:not(.manual)');\n      } else {\n        $slicks = $('.slick-slider:not(.manual)');\n      }\n      $slicks.each(function () {\n        $that.slickInit(this);\n      });\n    },\n    slickInit: function (element) {\n      var $that = this;\n      var $this = $(element);\n      var options_default = {\n        slidesToScroll: 1,\n        slidesToShow: 1,\n        adaptiveHeight: true,\n        arrows: true,\n        dots: true,\n        autoplay: false,\n        autoplaySpeed: 3000,\n        centerMode: false,\n        centerPadding: \"60px\",\n        draggable: true,\n        fade: false,\n        focusOnSelect: false,\n        infinite: false,\n        pauseOnHover: false,\n        rtl: false,\n        speed: 300,\n        vertical: false,\n        prevArrow: '<button class=\"slick-prev slick-arrow\" aria-label=\"Previous\">' + '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d=\"M206.7 464.6l-183.1-191.1C18.22 267.1 16 261.1 16 256s2.219-11.97 6.688-16.59l183.1-191.1c9.152-9.594 24.34-9.906 33.9-.7187c9.625 9.125 9.938 24.37 .7187 33.91L73.24 256l168 175.4c9.219 9.5 8.906 24.78-.7187 33.91C231 474.5 215.8 474.2 206.7 464.6z\"/></svg>' + '</button>',\n        nextArrow: '<button class=\"slick-next slick-arrow\" aria-label=\"Next\">' + '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d=\"M342.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L274.7 256 105.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z\"/></svg>' + '</button>'\n      };\n      if (!$this.hasClass('slick-initialized')) {\n        var options = $this.data('slick-options');\n        if (options === undefined) {\n          options = {};\n        }\n        $this.on('init', function (e, slick) {\n          $that.heroNextAnimation($this);\n        });\n        var slidesToShow = $this.data('slick-slides-to-show');\n        var slidesToShowTablet = $this.data('slick-slides-to-show-tablet');\n        var enableArrows = $this.data('slick-arrows');\n        var enableDots = $this.data('slick-dots');\n        var appendArrows = $this.data('slick-append-arrows');\n        var centerMode = $this.data('slick-center-mode');\n        var centerPadding = $this.data('slick-center-padding');\n        if (slidesToShow !== undefined) {\n          options.slidesToShow = slidesToShow;\n        }\n        if (enableArrows !== undefined) {\n          options.arrows = enableArrows;\n        }\n        if (enableDots !== undefined) {\n          options.dots = enableDots;\n        }\n        if (appendArrows !== undefined) {\n          options.appendArrows = appendArrows;\n        }\n        if (centerMode !== undefined) {\n          options.centerMode = centerMode;\n          options.infinite = true;\n          if (centerPadding !== undefined && centerPadding !== '') {\n            options.centerPadding = centerPadding + 'px';\n          }\n        }\n        if (slidesToShow !== slidesToShowTablet && slidesToShow !== undefined && slidesToShowTablet !== undefined) {\n          options.responsive = [{\n            breakpoint: 920,\n            settings: {\n              slidesToShow: slidesToShowTablet\n            }\n          }, {\n            breakpoint: 768,\n            settings: {\n              slidesToShow: 1\n            }\n          }];\n        }\n        options = $.extend({}, options_default, options);\n        $this.slick(options);\n        $this.on('setPosition', function (event, slick) {\n          $this.find('[data-bs-toggle=\"tooltip\"]').tooltip();\n          var max_height = 0;\n          slick.$slides.each(function () {\n            var $slide = $(this);\n            if ($slide.hasClass('slick-active')) {\n              if (slick.options.adaptiveHeight && slick.options.slidesToShow > 1 && slick.options.vertical === false) {\n                if (max_height < $slide.outerHeight()) {\n                  max_height = $slide.outerHeight();\n                }\n              }\n            }\n          });\n          if (max_height !== 0) {\n            $this.find('> .slick-list').animate({\n              height: max_height\n            }, 500);\n          }\n        });\n      }\n    },\n    initSlick: function () {\n      const _self = this;\n      $(\".slick-slider\").on('init', function (event, slick) {\n        const $slider = $(this);\n        const dotWrap = $slider.find('.slick-dots ul');\n        _self.removeRoleDot($slider);\n        if (dotWrap) {\n          dotWrap.attr('role', 'tablist');\n        }\n      });\n    },\n    removeRoleDot: function ($slider) {\n      setTimeout(() => {\n        const slickDots = $slider.find('.slick-dots');\n        if (slickDots && slickDots.attr('role')) {\n          slickDots.removeAttr('role');\n        }\n      }, 0);\n    },\n    beforeChange: function () {\n      var $that = this;\n      $(\".slick-slider\").on(\"beforeChange\", function () {\n        $that.animateNextSlider($(this));\n      });\n    },\n    afterChange: function () {\n      var $that = this;\n      $(\".slick-slider\").on(\"afterChange\", function () {\n        $that.animateNextSlider($(this), 'after');\n        $that.heroNextAnimation($(this));\n        $that.removeRoleDot($(this));\n      });\n    },\n    animateNextSlider: function (slick) {\n      let process = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'before';\n      if (!slick.hasClass('slick-slider-next-has-animate')) {\n        return;\n      }\n      if (process === 'before') {\n        var sliderItem = slick.find('.slick-slide:not(.slick-active)'),\n          sliderAnimate = sliderItem.find('.animate__animated'),\n          dataAnimate = '';\n        if (sliderAnimate.length <= 0) {\n          return;\n        }\n        sliderAnimate.each(function () {\n          dataAnimate = $(this).attr('data-animate');\n          if (dataAnimate.length) {\n            $(this).removeClass('animate__animated').removeClass('animate__' + dataAnimate);\n          }\n        });\n      }\n      if (process === 'after') {\n        var sliderActive = slick.find('.slick-active'),\n          sliderAnimate2 = sliderActive.find('[data-animate]:not(.animate__animated)');\n        if (sliderAnimate2.length > 0) {\n          GSP.animation.init();\n        }\n      }\n    },\n    heroNextAnimation: function (slider) {\n      if (slider.hasClass('gsp-slider-swipe-fade-in')) {\n        $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          $(this).find('.gsp-hero-media-inner').css({\n            'transform': 'scale(1.15)',\n            '-webkit-transform': 'scale(1.15)',\n            'transition': 'all 1200ms ease 0s',\n            '-webkit-transition': 'all 1200ms ease 0s'\n          });\n          if ($(this).hasClass('slick-current')) {\n            $(this).find('.gsp-hero-media-inner').css({\n              'transform': 'scale(1)'\n            });\n          }\n        });\n      }\n      if (slider.hasClass('gsp-slider-swipe-fade-out')) {\n        $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          $(this).find('.gsp-hero-media-inner').css({\n            'transform': 'scale(1)',\n            '-webkit-transform': 'scale(1)',\n            'transition': 'all 1200ms ease 0s',\n            '-webkit-transition': 'all 1200ms ease 0s'\n          });\n          if ($(this).hasClass('slick-current')) {\n            $(this).find('.gsp-hero-media-inner').css({\n              'transform': 'scale(1.15)'\n            });\n          }\n        });\n      }\n      if (slider.hasClass('gsp-slider-swipe-swirl-left')) {\n        $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          $(this).find('.gsp-hero-media-inner').css({\n            'transform': 'scale(2) rotate(10deg)',\n            '-webkit-transform': 'scale(2) rotate(10deg)',\n            'transition': 'all 2000ms ease 0s',\n            '-webkit-transition': 'all 2000ms ease 0s'\n          });\n          if ($(this).hasClass('slick-current')) {\n            $(this).find('.gsp-hero-media-inner').css({\n              'transform': 'scale(1) rotate(0)'\n            });\n          }\n        });\n      }\n      if (slider.hasClass('gsp-slider-swipe-swirl-right')) {\n        $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          if ($(this).hasClass('slick-current')) {\n            $(this).find('.gsp-hero-media-inner').css({\n              '-webkit-transform': 'scale(1) rotate(0)',\n              'transform': 'scale(1) rotate(0)'\n            });\n          } else {\n            $(this).find('.gsp-hero-media-inner').css({\n              'transform': 'scale(2) rotate(-10deg)',\n              '-webkit-transform': 'scale(2) rotate(-10deg)',\n              'transition': 'all 2000ms ease 0s',\n              '-webkit-transition': 'all 2000ms ease 0s'\n            });\n          }\n        });\n      }\n      if (slider.hasClass('gsp-slider-swipe-burn')) {\n        var $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          $(this).css({\n            'filter': 'contrast(1000%) saturate(1000%)',\n            '-webkit-filter': 'contrast(1000%) saturate(1000%)',\n            'opacity': '0',\n            'transition': 'all 1000ms ease 0s',\n            '-webkit-transition': 'all 1000ms ease 0s'\n          });\n          if ($(this).hasClass('slick-current')) {\n            $(this).css({\n              'filter': 'contrast(100%) saturate(100%)',\n              '-webkit-filter': 'contrast(100%) saturate(100%)',\n              'opacity': '1'\n            });\n          }\n        });\n      }\n      if (slider.hasClass('gsp-slider-swipe-blur')) {\n        $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          $(this).css({\n            'filter': 'blur(32px)',\n            '-webkit-filter': 'blur(32px)',\n            'opacity': '0',\n            'transition': 'all 1000ms ease 0s',\n            '-webkit-transition': 'all 1000ms ease 0s'\n          });\n          if ($(this).hasClass('slick-current')) {\n            $(this).css({\n              'filter': 'blur(0)',\n              '-webkit-filter': 'blur(0)',\n              'opacity': '1'\n            });\n          }\n        });\n      }\n      if (slider.hasClass('gsp-slider-swipe-flash')) {\n        $slider = slider.find('.slick-slide');\n        $.each($slider, function () {\n          $(this).css({\n            'filter': 'brightness(25)',\n            '-webkit-filter': 'brightness(25)',\n            'opacity': '0',\n            'transition': 'all 1000ms ease 0s',\n            '-webkit-transition': 'all 1000ms ease 0s'\n          });\n          if ($(this).hasClass('slick-current')) {\n            $(this).css({\n              'filter': 'brightness(1)',\n              '-webkit-filter': 'brightness(1)',\n              'opacity': '1'\n            });\n          }\n        });\n      }\n    },\n    slickGoTo: function (slick) {\n      let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if ($(slick).hasClass('slick-initialized')) {\n        $(slick).slick('slickGoTo', index);\n      }\n    },\n    addNewItem: function ($selector, $item) {\n      $($selector).each(function () {\n        if ($(this).hasClass('slick-initialized')) {\n          $(this).slick('slickAdd', $item);\n        }\n      });\n    },\n    removeItem: function ($selector) {\n      let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      $($selector).each(function () {\n        var $this = $(this);\n        if ($this.hasClass('slick-initialized')) {\n          while ($this.slick('getSlick').$slides.length > 0) {\n            $this.slick('slickRemove', index);\n          }\n        }\n      });\n    },\n    refresh: function (slick) {\n      $(slick).each(function () {\n        if ($(this).hasClass('slick-initialized')) {\n          $(this).slick('refresh');\n        }\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.slickSlider.init();\n    GSP.animation.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/animation.js?")},"./src/js/components/back-to-top.js":function(){eval('(function ($) {\n  \'use strict\';\n\n  GSP.scrollToTop = {\n    init: function () {\n      var $template = $(".gsp-stt");\n      if ($template.length) {\n        var updateprogress = function () {\n          var scroll = $(window).scrollTop();\n          var height = $(document).height() - $(window).height();\n          var offset = 200;\n          var deg = scroll / height * 360;\n          if (scroll > offset) {\n            $template.addClass("active");\n          } else {\n            $template.removeClass("active");\n          }\n          $template.css(\'--gsp-stt-degrees\', deg + \'deg\');\n        };\n        updateprogress();\n        $(window).scroll(updateprogress);\n        var duration = 0;\n        $template.on("click", function (e) {\n          e.preventDefault();\n          $("html, body").animate({\n            scrollTop: 0\n          }, duration);\n          return false;\n        });\n      }\n    }\n  };\n  $(document).ready(function () {\n    GSP.scrollToTop.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/back-to-top.js?')},"./src/js/components/bs-script.js":function(){eval("/**\n * Boostrap script ***/\n(function ($) {\n  'use strict';\n\n  GSP.bsScript = {\n    init: function () {\n      this.tooltips();\n    },\n    tooltips: function () {\n      const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n      const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n    }\n  };\n  GSP.bsScript.init();\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/bs-script.js?")},"./src/js/components/collapse.js":function(){eval("var APP = APP || {};\n(function ($) {\n  'use strict';\n\n  APP.collapseTabs = {\n    init: function () {\n      this.collapseTabSetUp();\n    },\n    collapseTabSetUp: function () {\n      var _that = this;\n      var $tabs = $('.gsp-collapse-tabs'),\n        $tabContent = $tabs.find('.tab-content'),\n        collapse = $tabContent.find('.collapse'),\n        target = $tabContent.find('.collapse.show').attr('id'),\n        btnCollapseActive = $tabContent.find('[data-bs-target=\"#' + target + '\"]'),\n        $navTab = $tabs.find('.nav-tabs'),\n        $tabPane = $tabs.find('.tab-pane'),\n        $navLink = $tabs.find('.nav-link');\n      btnCollapseActive.attr('data-bs-toggle', false);\n      $navLink.on('show.bs.tab', function (e) {\n        var target = $(this).attr('data-bs-target'),\n          tabPaneActive = $tabContent.find(target),\n          btnCollapse = $tabContent.find('[data-bs-toggle]'),\n          btnCollapseActive = tabPaneActive.find('[data-bs-toggle]'),\n          collapseActive = tabPaneActive.find('.collapse');\n        _that.switchDataToggle(btnCollapse, btnCollapseActive);\n        _that.switchStatusActive(collapse, collapseActive, 'show');\n      });\n      collapse.on('show.bs.collapse', function () {\n        var $this = $(this),\n          target = $this.closest('.tab-pane').attr('id'),\n          tabPaneActive = $(this).closest('.tab-pane'),\n          btnCollapse = $tabContent.find('[data-bs-toggle]'),\n          btnCollapseActive = tabPaneActive.find('[data-bs-toggle]'),\n          $navLinkActive = $navTab.find('[data-bs-target=\"#' + target + '\"]');\n        collapse.removeClass('show');\n        _that.switchDataToggle(btnCollapse, btnCollapseActive);\n        _that.switchStatusActive($navLink, $navLinkActive, 'active');\n        _that.switchStatusActive($tabPane, tabPaneActive, 'active');\n        _that.switchStatusActive($tabPane, tabPaneActive, 'show');\n      });\n    },\n    switchDataToggle: function (collapse, collapseActive) {\n      collapse.attr('data-bs-toggle', 'collapse');\n      collapseActive.attr('data-bs-toggle', false);\n    },\n    switchStatusActive: function (el, elActive, status) {\n      el.removeClass(status);\n      elActive.addClass(status);\n    }\n  };\n  APP.collapseShowByHash = {\n    init: function () {\n      const collapseHash = $('[data-show-collapse-by-hash]');\n      if (collapseHash.length < 1) {\n        return;\n      }\n      var hash = window.location.hash;\n      if (hash) {\n        if (collapseHash.hasClass('show')) {\n          collapseHash.removeClass(\"show\");\n        }\n        const collapseShow = $(hash + '.collapse[data-show-collapse-by-hash]');\n        if (collapseShow.length) {\n          collapseShow.addClass('show');\n        }\n      }\n    }\n  };\n  $(document).ready(function () {\n    APP.collapseTabs.init();\n    APP.collapseShowByHash.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/collapse.js?")},"./src/js/components/core.js":function(){eval("(function ($) {\n  \"use strict\";\n\n  var GSP = GSP || {};\n  if (typeof window['GSP'] === \"undefined\") {\n    window['GSP'] = GSP;\n  }\n  GSP.core = {\n    _vw_current: 0,\n    _devices: {\n      xs: 0,\n      sm: '576',\n      md: '768',\n      lg: '992',\n      xl: '1200',\n      xxl: '1400'\n    },\n    isDeviceUp: function (device) {\n      return window.matchMedia('(min-width: ' + GSP.core._devices[device] + 'px)').matches;\n    },\n    isDeviceDown: function (device) {\n      return window.matchMedia('(max-width: ' + (GSP.core._devices[device] - 1) + 'px)').matches;\n    },\n    init: function () {\n      this.changeViewportWidth();\n      this.windowResize();\n    },\n    windowResize: function () {\n      window.addEventListener('resize', function () {\n        GSP.core.changeViewportWidth();\n      });\n    },\n    changeViewportWidth: function () {\n      let vw = document.documentElement.clientWidth;\n      $('body').css('--vw', \"\".concat(vw, \"px\"));\n      if (GSP.core._vw_current !== vw) {\n        GSP.core._vw_current = vw;\n        $(document).trigger('gsp_change_viewport');\n      }\n    }\n  };\n  $(document).ready(function () {\n    GSP.core.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/core.js?")},"./src/js/components/counter.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.counter = {\n    init: function () {\n      const $counter = $('.gsp-counter');\n      const _self = this;\n      if ($counter.length < 1) {\n        return;\n      }\n      gspTheme.helper.loadAssetsNew('countUpHandle', () => {\n        _self.processCounter($counter);\n      });\n    },\n    processCounter: function ($counter) {\n      $counter.waypoint(function () {\n        let wrap = this.element ? this.element : this,\n          $this = $(wrap);\n        let el = $this.find('.gsp-counter-number-end');\n        let number_start = $this.data('start') !== undefined ? $this.data('start') : 0;\n        let number_end = $this.data('end') !== undefined ? $this.data('end') : 100;\n        let separator = $this.data('separator') !== undefined ? $this.data('separator') : '';\n        let decimal = $this.data('decimal') !== undefined ? $this.data('decimal') : \"\";\n        let decimals = $this.data('decimals') !== undefined ? $this.data('decimals') : 0;\n        let duration = $this.data('duration') !== undefined ? $this.data('duration') : 0;\n        let usegrouping = false;\n        if (separator !== '') {\n          usegrouping = true;\n        }\n        var options = {\n          useEasing: true,\n          useGrouping: usegrouping,\n          separator: separator,\n          decimal: decimal\n        };\n        var counterup = new CountUp(el[0], number_start, number_end, decimals, duration, options);\n        counterup.start();\n      }, {\n        offset: '100%',\n        triggerOnce: true\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.counter.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/counter.js?")},"./src/js/components/drift-zoom.js":function(){eval("(function ($) {\n  \"use strict\";\n\n  GSP.driftZoom = {\n    init: function () {\n      const _self = this;\n      var drift = document.querySelectorAll('[data-drift-option]');\n      if (drift.length) {\n        gspTheme.helper.loadAssetsNew('driftHandle', () => {\n          _self.driftProcess(drift);\n        });\n      }\n    },\n    driftProcess: function (drift) {\n      drift.forEach(zoom => {\n        var paneContainer = zoom.querySelector('.gsp-drift-zoom');\n        var options_default = {\n          paneContainer: paneContainer ? paneContainer : false,\n          inlinePane: false\n        };\n        let option = zoom.dataset.driftOption;\n        if (option == '') {\n          option = {};\n        }\n        option = Object.assign({}, options_default, JSON.parse(option));\n        new Drift(zoom, option);\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.driftZoom.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/drift-zoom.js?")},"./src/js/components/dropdown.js":function(){eval("(function ($) {\n  'use strict';\n\n  const HAS_DROPDOWN_CHILD_SHOW_CLASS = 'has-child-dropdown-show';\n  $(document).on('show.bs.dropdown', function (event) {\n    if ($(event.target).closest('#offCanvasNavBar').length === 0) {\n      return;\n    }\n    if (!$(event.target).hasClass('nav-link')) {\n      $(event.target).addClass(HAS_DROPDOWN_CHILD_SHOW_CLASS);\n    }\n  });\n  $(document).on('hide.bs.dropdown', function (event) {\n    if ($(event.target).closest('#offCanvasNavBar').length === 0) {\n      return;\n    }\n    if ($(event.target).parent().find('.' + HAS_DROPDOWN_CHILD_SHOW_CLASS).length) {\n      event.preventDefault();\n    }\n    $('#offCanvasNavBar').find('.' + HAS_DROPDOWN_CHILD_SHOW_CLASS).removeClass(HAS_DROPDOWN_CHILD_SHOW_CLASS);\n    if ($(event.target).closest('.nav-item') && !$(event.target).parent().hasClass('nav-item') && (event.clickEvent === undefined || event.clickEvent && event.clickEvent.target === event.target)) {\n      $(event.target).addClass(HAS_DROPDOWN_CHILD_SHOW_CLASS);\n    }\n  });\n  GSP.dropdown = {\n    init: function () {\n      const dropdown = $('gsp-dropdown');\n      const _that = this;\n      if (dropdown.length) {\n        dropdown.each(function (index) {\n          _that.setUpDropdown($(this));\n        });\n      }\n    },\n    setUpDropdown(dropdown) {\n      const selectDropdown = dropdown.find('.dropdown-select');\n      const currentSelect = selectDropdown.val();\n      const item = dropdown.find('.dropdown-menu .dropdown-item');\n      const submit = dropdown.data('submit') === undefined ? false : dropdown.data('submit');\n      const idForm = dropdown.data('form-id');\n      item.each(function () {\n        const $this = $(this);\n        $this.on('click', function (event) {\n          const value = $(this).data('value');\n          selectDropdown.val(value);\n          event.preventDefault();\n          if (submit && idForm !== undefined && currentSelect !== value) {\n            $('#' + idForm).submit();\n          }\n        });\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.dropdown.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/dropdown.js?")},"./src/js/components/function/customer.js":function(){eval('const gspTheme = window.gspTheme || {};\nclass GspCustomer {\n  constructor() {\n    this.containerAddress = document.querySelector("[data-gsp-customer-addresses]");\n    this.init();\n  }\n  init() {\n    this.agree_term();\n    if (this.containerAddress) {\n      this.setupCountries();\n    }\n  }\n  agree_term() {\n    document.querySelectorAll(\'form[data-show-terms="true"]\').forEach(e => {\n      const agreeTerm = e.querySelector("[name=\'agree_terms\']");\n      const termsAction = e.querySelector("[data-terms-action]");\n      agreeTerm.addEventListener(\'change\', function () {\n        if (this.checked) {\n          termsAction.removeAttribute("disabled");\n        } else {\n          termsAction.setAttribute("disabled", "true");\n        }\n      });\n    });\n  }\n  setupCountries() {\n    const countrySelectElements = this.containerAddress.querySelectorAll("[data-address-country-select]");\n    if (Shopify && Shopify.CountryProvinceSelector) {\n      new Shopify.CountryProvinceSelector("AddressCountry_new", "AddressProvince_new", {\n        hideElement: "AddressProvinceContainerNew"\n      });\n      countrySelectElements.forEach(element => {\n        const formId = element.dataset.formId;\n        new Shopify.CountryProvinceSelector("AddressCountry_".concat(formId), "AddressProvince_".concat(formId), {\n          hideElement: "AddressProvinceContainer_".concat(formId)\n        });\n      });\n    }\n  }\n}\ngspTheme.Customer = new GspCustomer();\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/function/customer.js?')},"./src/js/components/function/filters.js":function(){eval('const gspTheme = window.gspTheme || {};\nclass gspFetchPostByParams {\n  constructor() {\n    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.listingWrap = selector.listingWrap ? selector.listingWrap : false;\n    this.spin = selector.spin ? selector.spin : false;\n    this.sectionWrap = this.listingWrap ? this.listingWrap.closest(\'.gsp-section__wrap\') : false;\n    this.mainRenderInner = this.listingWrap ? this.listingWrap.querySelector(\'.gsp-listing-inner\') : false;\n    this.sectionId = this.listingWrap ? this.listingWrap.dataset.sectionId : false;\n    this.isIsotope = this.listingWrap && this.listingWrap.classList.contains("gsp-isotope");\n    this.hasAnimation = this.listingWrap && this.listingWrap.classList.contains("has-animation");\n    this.hasSidebar = this.sectionWrap && this.sectionWrap.classList.contains("gsp-section__has-sidebar");\n    this.sidebar = this.hasSidebar ? this.sectionWrap.querySelector(\'#gsp-sidebar\') : false;\n    this.sidebarSticky = this.sidebar && this.sidebar.classList.contains("sidebar-sticky");\n  }\n  loadPost() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let targetRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let append = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const _self = this;\n    gspLoadingBar.start(document.querySelector(\'body\'), true);\n    if (!append) {\n      this.scrollTop();\n    }\n    if (this.spin) {\n      this.activeButtonSpin();\n    }\n    const optionsDefault = {\n      fromCache: true\n    };\n    options = {\n      ...optionsDefault,\n      ...options\n    };\n    gspTheme.helper.fetchSection(_self.sectionId, options).then(response => {\n      targetRender.forEach(target => {\n        if (append) {\n          response.querySelectorAll(target.selector).forEach(item => {\n            _self.sectionWrap.querySelector(target.target).appendChild(item);\n            if (_self.isIsotope) {\n              var iso = new Isotope(_self.sectionWrap.querySelector(target.target), {});\n              iso.appended(item);\n            }\n          });\n        } else {\n          const element = response.querySelector(target.selector);\n          if (element) {\n            _self.sectionWrap.querySelector(target.target).innerHTML = element.innerHTML;\n          }\n        }\n      });\n      window.gspEvents.emit("load-post", response);\n    }).catch(error => {\n      if (this.spin) {\n        this.activeButtonSpin(false);\n      }\n      gspLoadingBar.remove(document.querySelector(\'body\'));\n      window.gspEvents.emit("load-post-error");\n    }).finally(() => {\n      gspLoadingBar.remove(document.querySelector(\'body\'));\n      if (gspSetting.templateName === \'search\') {\n        this.updateSectionPageTitle(".gsp-page-title-section", options);\n      }\n      if (this.spin) {\n        this.activeButtonSpin(false);\n      }\n      window.gspEvents.emit("load-post-finally", append);\n      this.initPost(append);\n    });\n  }\n  scrollTop() {\n    if (this.mainRenderInner) {\n      this.mainRenderInner.style.transition = "opacity 1000ms";\n      this.mainRenderInner.style.opacity = 0;\n      this.mainRenderInner.style.pointerEvents = \'none\';\n      const wrapperOffset = this.listingWrap.getBoundingClientRect().top + window.scrollY - 100;\n      window.scrollTo(0, wrapperOffset);\n    }\n  }\n  updateSectionPageTitle(target, options) {\n    document.querySelectorAll(target).forEach(e => {\n      const section_id = e.dataset.sectionId;\n      if (section_id !== undefined) {\n        gspTheme.helper.fetchSection(section_id, options).then(response => {\n          const breadcrumb = response.querySelector(".gsp-breadcrumb");\n          const pageTitle = response.querySelector(".gsp-page-title");\n          if (breadcrumb) {\n            e.querySelector(".gsp-breadcrumb").innerHTML = breadcrumb.innerHTML;\n          }\n          if (pageTitle) {\n            e.querySelector(".gsp-page-title").innerHTML = pageTitle.innerHTML;\n          }\n        });\n      }\n    });\n  }\n  initPost() {\n    let append = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    GSP.bsScript.tooltips();\n    if (this.isIsotope && !append) {\n      GSP.isotopeFilter.setupIsotope();\n    }\n    if (this.hasAnimation) {\n      GSP.animation.init();\n    }\n    if (this.sidebarSticky) {\n      GSP.sticky.refresh(\'.gsp-sidebar.sidebar-sticky > .gsp-sidebar-inner\');\n    }\n  }\n  activeButtonSpin() {\n    let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (this.spin) {\n      const btnSpin = this.spin.querySelector(".gsp-button__spin");\n      const btnContent = this.spin.querySelector(".gsp-button__content");\n      if (active) {\n        btnSpin.classList.add(\'active\');\n        btnContent.classList.remove(\'active\');\n      } else {\n        btnContent.classList.add(\'active\');\n        btnSpin.classList.remove(\'active\');\n      }\n    }\n  }\n  getPageByUrl() {\n    let $url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const paramsCurrentUrl = this.getParamsCurrentUrl($url);\n    if (paramsCurrentUrl !== null) {\n      const paramsPage = paramsCurrentUrl.get(\'page\');\n      if (paramsPage !== null && Number.isInteger(Number(paramsPage))) {\n        return parseInt(paramsPage);\n      }\n    }\n    return null;\n  }\n  getParamsCurrentUrl() {\n    let $url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if ($url === null) {\n      $url = window.location.href;\n    }\n    const urlObj = new URL($url);\n    if (urlObj) {\n      return new URLSearchParams(urlObj.search);\n    }\n    return null;\n  }\n}\nclass gspPagination extends HTMLElement {\n  constructor() {\n    super();\n    this.type = this.dataset.paginationType ? this.dataset.paginationType : \'paginate_shopify\';\n    this.fetchPost = new gspFetchPostByParams(this.getSelectors());\n    this.currentPage = this.getCurrentPage();\n    this.totalPages = parseInt(this.dataset.totalPages);\n    this.infiniteLoadingObserver;\n    this.mainListing = this.closest(\'[data-gsp-main-listing]\');\n    this.pushState = false;\n  }\n  connectedCallback() {\n    this.init();\n  }\n  getCurrentPage() {\n    if (this.mainListing) {\n      return this.fetchPost.getPageByUrl() !== null ? this.fetchPost.getPageByUrl() : 1;\n    } else {\n      return parseInt(this.dataset.currentPage);\n    }\n  }\n  getSelectors() {\n    return {\n      listingWrap: this.closest(\'.gsp-listing\'),\n      spin: this.querySelector(\'.gsp-spin-wrapper\')\n    };\n  }\n  getSelectorsToRender() {\n    let append = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var listingId = this.dataset.listingTarget;\n    if (append) {\n      return [{\n        selector: "[data-listing-id=\'" + listingId + "\'] .gsp-listing-item",\n        target: ".gsp-listing-inner"\n      }];\n    } else {\n      return [{\n        selector: "[data-listing-id=\'" + listingId + "\']",\n        target: "[data-listing-id=\'" + listingId + "\']"\n      }];\n    }\n  }\n  init() {\n    const _self = this;\n    const $targetRender = _self.getSelectorsToRender(false);\n    const $targetRenderAppend = _self.getSelectorsToRender();\n    if (this.mainListing) {\n      this.pushState = true;\n    }\n    switch (_self.type) {\n      case \'nextpre\':\n        const $buttonPre = _self.querySelector(\'.gsp-pagination-pre\');\n        const $buttonNext = _self.querySelector(\'.gsp-pagination-next\');\n        const $pagePre = $buttonPre.dataset.page ? parseInt($buttonPre.dataset.page) : null;\n        const $pageNext = $buttonNext.dataset.page ? parseInt($buttonNext.dataset.page) : null;\n        if ($pagePre >= 1 && $pagePre <= _self.totalPages) {\n          const $options = {\n            params: {\n              page: $pagePre\n            },\n            pushState: _self.pushState\n          };\n          $buttonPre.addEventListener("click", _self.fetchPost.loadPost.bind(_self.fetchPost, $options, $targetRender, false));\n        }\n        if ($pageNext >= 1 && $pageNext <= _self.totalPages) {\n          const $options = {\n            params: {\n              page: $pageNext\n            },\n            pushState: _self.pushState\n          };\n          $buttonNext.addEventListener("click", _self.fetchPost.loadPost.bind(_self.fetchPost, $options, $targetRender, false));\n        }\n        break;\n      case \'pagination\':\n        const paging = _self.querySelectorAll(\'span a\');\n        paging.forEach(function (p) {\n          p.addEventListener("click", function (e) {\n            e.preventDefault();\n            let $pageTarget = _self.fetchPost.getPageByUrl(e.currentTarget.href);\n            if ($pageTarget !== null && $pageTarget <= _self.totalPages) {\n              const $options = {\n                params: {\n                  page: $pageTarget\n                },\n                pushState: _self.pushState\n              };\n              _self.fetchPost.loadPost($options, $targetRender, false);\n            }\n          });\n        });\n        break;\n      case \'loadmore\':\n        const button = _self.querySelector(\'button\');\n        button.addEventListener("click", function (e) {\n          e.preventDefault();\n          let $pageTarget = _self.currentPage + 1;\n          if ($pageTarget <= _self.totalPages) {\n            const $options = {\n              params: {\n                page: $pageTarget\n              }\n            };\n            _self.fetchPost.loadPost($options, $targetRenderAppend);\n          }\n          _self.updateCurrentPage($pageTarget);\n        });\n        break;\n      case \'infinite\':\n        _self.infiniteLoadingObserver = new IntersectionObserver(entries => {\n          entries.forEach(entry => {\n            if (1 === entry.intersectionRatio) {\n              let $pageTarget = _self.currentPage + 1;\n              if ($pageTarget <= _self.totalPages) {\n                const $options = {\n                  params: {\n                    page: $pageTarget\n                  }\n                };\n                _self.fetchPost.loadPost($options, $targetRenderAppend);\n                _self.updateCurrentPage($pageTarget);\n              }\n            }\n          });\n        }, {\n          threshold: 1\n        });\n        _self.infiniteLoadingObserver.observe(_self);\n    }\n  }\n  updateCurrentPage(pageTarget) {\n    gspEvents.subscribe("load-post-finally", append => {\n      this.currentPage = pageTarget;\n      if (pageTarget >= this.totalPages && append) {\n        this.remove();\n      }\n    });\n  }\n}\ncustomElements.define("gsp-pagination", gspPagination);\nclass gspWidgetFilterList extends HTMLElement {\n  constructor() {\n    super();\n    this.wrapper = this.getSelector().wrapper;\n    this.param = this.wrapper.dataset.param;\n    this.fetchPost = new gspFetchPostByParams(this.getSelectorsMainSection());\n  }\n  getSelector() {\n    return {\n      wrapper: this.querySelector(".gsp-product-option-content")\n    };\n  }\n  connectedCallback() {\n    this.wrapper.addEventListener("change", () => {\n      this.processFilter();\n      window.gspEvents.emit("filter-product-change");\n    });\n  }\n  getSelectorsMainSection() {\n    const mainWrap = this.closest(\'.gsp-section-content__wrap\');\n    return {\n      listingWrap: mainWrap ? mainWrap.querySelector(\'.gsp-listing\') : false\n    };\n  }\n  getSelectorsToRender() {\n    return [{\n      selector: ".gsp-listing",\n      target: ".gsp-listing"\n    }, {\n      selector: ".gsp-sidebar-section > .gsp-sidebar-inner",\n      target: ".gsp-sidebar-section > .gsp-sidebar-inner"\n    }, {\n      selector: "#gsp-offcanvas-filter-product .offcanvas-body",\n      target: "#gsp-offcanvas-filter-product .offcanvas-body"\n    }, {\n      selector: ".gsp-breadcrumb",\n      target: ".gsp-breadcrumb"\n    }];\n  }\n  getAllItemCheck() {\n    let listCheck = [];\n    this.querySelectorAll(\'input[type="checkbox"]\').forEach(checkbox => {\n      const value = checkbox.value;\n      if (checkbox.checked && value !== "") {\n        listCheck.push(value);\n      }\n    });\n    return listCheck;\n  }\n  processFilter() {\n    const _self = this;\n    _self.getAllItemCheck();\n    const $options = {\n      paramVars: {\n        param: _self.param,\n        values: _self.getAllItemCheck()\n      },\n      pushState: true,\n      deleteParams: [\'page\']\n    };\n    _self.fetchPost.loadPost($options, _self.getSelectorsToRender(), false);\n  }\n}\nif (!customElements.get("gsp-widget-filter-list")) {\n  customElements.define("gsp-widget-filter-list", gspWidgetFilterList);\n}\nif (!customElements.get("gsp-filter-list")) {\n  class gspFilterListProduct extends gspWidgetFilterList {\n    constructor() {\n      super();\n      this.offcanvas = this.closest("#gsp-offcanvas-filter-product");\n      this.close();\n    }\n    close() {\n      const bsOffcanvas = new bootstrap.Offcanvas(this.offcanvas);\n      gspEvents.subscribe("filter-product-change", () => {\n        setTimeout(() => {\n          bsOffcanvas.hide();\n        }, 150);\n      });\n    }\n  }\n  customElements.define("gsp-filter-list", gspFilterListProduct);\n}\nclass gspFilterWidgetPriceProduct extends HTMLElement {\n  constructor() {\n    super();\n    this.wrapper = this.querySelector(".gsp-filter-price-inner");\n    this.inputMin = this.wrapper.querySelector("input[name=range-min]");\n    this.inputMax = this.wrapper.querySelector("input[name=range-max]");\n    this.rangeMax = this.inputMax.max;\n    this.paramMin = this.inputMin.dataset.param;\n    this.paramMax = this.inputMax.dataset.param;\n    this.btnSubmit = this.wrapper.querySelector(".btn-filter");\n    this.design = this.dataset.design ? this.dataset.design : "slider";\n    this.fetchPost = new gspFetchPostByParams(this.getSelectorsMain());\n  }\n  connectedCallback() {\n    if (this.design === "slider") {\n      this.rangerFilter();\n    }\n    if (this.design === "input") {\n      this.submitFilter();\n    }\n  }\n  rangerFilter() {\n    this.wrapper.addEventListener("input", () => {\n      this.liveValueRanger();\n    });\n    this.inputMin.addEventListener("input", () => {\n      this.rangerMinChange();\n    });\n    this.inputMax.addEventListener("input", () => {\n      this.rangerMaxChange();\n    });\n    this.wrapper.addEventListener("change", () => {\n      this.processFilter();\n      window.gspEvents.emit("filter-product-change");\n    });\n  }\n  submitFilter() {\n    if (this.btnSubmit) {\n      this.btnSubmit.addEventListener("click", event => {\n        event.preventDefault();\n        this.processFilter();\n        window.gspEvents.emit("filter-product-change");\n      });\n    }\n  }\n  getSelectorsMain() {\n    const mainWrap = this.closest(\'.gsp-section-content__wrap\');\n    return {\n      listingWrap: mainWrap ? mainWrap.querySelector(\'.gsp-listing\') : false,\n      spin: this.querySelector(\'.gsp-spin-wrapper\')\n    };\n  }\n  getSelectorsToRender() {\n    return [{\n      selector: ".gsp-listing",\n      target: ".gsp-listing"\n    }, {\n      selector: ".gsp-sidebar-section > .gsp-sidebar-inner",\n      target: ".gsp-sidebar-section > .gsp-sidebar-inner"\n    }];\n  }\n  rangerMinChange() {\n    const $valueMin = Number(this.inputMin.value);\n    const $valueMax = Number(this.inputMax.value);\n    if ($valueMax - $valueMin <= 0) {\n      this.inputMin.value = $valueMax;\n    }\n  }\n  rangerMaxChange() {\n    const $valueMin = Number(this.inputMin.value);\n    const $valueMax = Number(this.inputMax.value);\n    if ($valueMax - $valueMin <= 0) {\n      this.inputMax.value = $valueMin;\n    }\n  }\n  liveValueRanger() {\n    const $livePriceMin = this.querySelector(".gsp-filter-price-live .min");\n    const $livePriceMax = this.querySelector(".gsp-filter-price-live .max");\n    const $rangeMax = Number(this.rangeMax);\n    const $valueMin = Number(this.inputMin.value);\n    const $valueMax = Number(this.inputMax.value);\n    const $totalRange = $rangeMax - $valueMin - ($rangeMax - $valueMax);\n    const $progressLeft = $valueMin / $rangeMax * 100 + "%";\n    const $progressRight = ($rangeMax - $valueMax) / $rangeMax * 100 + "%";\n    if ($totalRange >= 0) {\n      const $progressWidth = $totalRange / $rangeMax * 100 + "%";\n      this.wrapper.style.setProperty(\'--gsp-ranger-progress-width\', $progressWidth);\n    }\n    if ($valueMin === $rangeMax && $valueMin === $rangeMax && !this.inputMin.classList.contains("z-index-10")) {\n      this.inputMin.classList.add(\'z-index-10\');\n    }\n    if ($valueMin !== $rangeMax && $valueMin !== $rangeMax && this.inputMin.classList.contains("z-index-10")) {\n      this.inputMin.classList.remove(\'z-index-10\');\n    }\n    this.wrapper.style.setProperty(\'--gsp-ranger-progress-left\', $progressLeft);\n    this.wrapper.style.setProperty(\'--gsp-ranger-progress-right\', $progressRight);\n    $livePriceMin.textContent = $valueMin;\n    $livePriceMax.textContent = $valueMax;\n  }\n  processFilter() {\n    const $valueMin = Number(this.inputMin.value);\n    const $valueMax = Number(this.inputMax.value);\n    const $options = {\n      params: {\n        [this.paramMin]: $valueMin,\n        [this.paramMax]: $valueMax\n      },\n      pushState: true,\n      deleteParams: [\'page\']\n    };\n    this.fetchPost.loadPost($options, this.getSelectorsToRender(), false);\n  }\n}\nif (!customElements.get("gsp-widget-filter-price")) {\n  customElements.define("gsp-widget-filter-price", gspFilterWidgetPriceProduct);\n}\nif (!customElements.get("gsp-filter-price")) {\n  class gspFilterPriceProduct extends gspFilterWidgetPriceProduct {\n    constructor() {\n      super();\n      this.offcanvas = this.closest("#gsp-offcanvas-filter-product");\n      this.close();\n    }\n    close() {\n      const bsOffcanvas = new bootstrap.Offcanvas(this.offcanvas);\n      gspEvents.subscribe("filter-product-change", () => {\n        setTimeout(() => {\n          bsOffcanvas.hide();\n        }, 150);\n      });\n    }\n  }\n  customElements.define("gsp-filter-price", gspFilterPriceProduct);\n}\nif (!customElements.get("gsp-ordering")) {\n  class gspOrdering extends HTMLElement {\n    constructor() {\n      super();\n      this.select = this.querySelector(".gsp-select-ordering");\n      this.fetchPost = new gspFetchPostByParams(this.getSelectors());\n    }\n    connectedCallback() {\n      this.addEventListener("change", () => {\n        this.processFilter();\n      });\n    }\n    processFilter() {\n      if (this.select.value !== \'\') {\n        const $options = {\n          params: {\n            sort_by: this.select.value\n          },\n          pushState: true,\n          deleteParams: [\'page\']\n        };\n        this.fetchPost.loadPost($options, this.getSelectorsToRender(), false);\n      }\n    }\n    getSelectors() {\n      return {\n        listingWrap: this.closest(\'.gsp-listing\')\n      };\n    }\n    getSelectorsToRender() {\n      return [{\n        selector: "[data-gsp-listing-render]",\n        target: "[data-gsp-listing-render]"\n      }];\n    }\n  }\n  customElements.define("gsp-ordering", gspOrdering);\n}\nif (!customElements.get("gsp-applied-filters")) {\n  class gspAppliedFilters extends HTMLElement {\n    constructor() {\n      super();\n      this.buttons = this.querySelectorAll(".clear-filter");\n      this.fetchPost = new gspFetchPostByParams(this.getSelectors());\n    }\n    connectedCallback() {\n      this.processClear();\n    }\n    processClear() {\n      this.buttons.forEach(button => {\n        button.addEventListener("click", e => {\n          e.preventDefault();\n          const url = e.currentTarget.href;\n          if (url !== null && url !== \'\') {\n            const $options = {\n              url: url,\n              pushState: true\n            };\n            this.fetchPost.loadPost($options, this.getSelectorsToRender(), false);\n          }\n        });\n      });\n    }\n    getSelectors() {\n      return {\n        listingWrap: this.closest(\'.gsp-listing\')\n      };\n    }\n    getSelectorsToRender() {\n      return [{\n        selector: "[data-gsp-listing-render]",\n        target: "[data-gsp-listing-render]"\n      }, {\n        selector: "[data-toolbar]",\n        target: "[data-toolbar]"\n      }, {\n        selector: ".gsp-sidebar-section > .gsp-sidebar-inner",\n        target: ".gsp-sidebar-section > .gsp-sidebar-inner"\n      }];\n    }\n  }\n  customElements.define("gsp-applied-filters", gspAppliedFilters);\n}\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/function/filters.js?')},"./src/js/components/function/function.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _search_form__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./search-form */ "./src/js/components/function/search-form.js");\n/* harmony import */ var _search_form__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_search_form__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _customer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./customer */ "./src/js/components/function/customer.js");\n/* harmony import */ var _customer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_customer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _switch_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./switch-layout */ "./src/js/components/function/switch-layout.js");\n/* harmony import */ var _switch_layout__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_switch_layout__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _filters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filters */ "./src/js/components/function/filters.js");\n/* harmony import */ var _filters__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_filters__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _popup_promotion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./popup-promotion */ "./src/js/components/function/popup-promotion.js");\n/* harmony import */ var _popup_promotion__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_popup_promotion__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/function/function.js?')},"./src/js/components/function/popup-promotion.js":function(){eval("class gspPopupPromotion extends HTMLElement {\n  constructor() {\n    super();\n    this.delay = 5000;\n    this.storagePopup = localStorage.getItem('gsp-popup-promotion');\n  }\n  connectedCallback() {\n    this.bsModal = new bootstrap.Modal(this);\n    this.designMode();\n    const _self = this;\n    if (_self.storagePopup !== 'closed' && !Shopify.designMode) {\n      setTimeout(function () {\n        _self.bsModal.show();\n      }, _self.delay);\n    }\n    _self.addEventListener('hidden.bs.modal', () => {\n      localStorage.setItem('gsp-popup-promotion', 'closed');\n    });\n  }\n  designMode() {\n    const _self = this;\n    if (Shopify.designMode) {\n      const section = _self.closest('.shopify-section');\n      section.addEventListener('shopify:section:select', event => {\n        _self.bsModal.show();\n      });\n      section.addEventListener('shopify:section:deselect', () => {\n        _self.bsModal.hide();\n      });\n    }\n  }\n}\ncustomElements.define(\"gsp-popup-promotion\", gspPopupPromotion);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/function/popup-promotion.js?")},"./src/js/components/function/search-form.js":function(){eval('if (!customElements.get("gsp-search-form")) {\n  class gspSearchForm extends HTMLElement {\n    constructor() {\n      super();\n      this.enablePredictive = this.dataset.predictiveSearch === "true";\n      this.searchOffcanvas = this.closest(\'.gsp-search-offcanvas-end\');\n      this.recommend = this.querySelector(\'.gsp-search-recommend\');\n      this.input = this.querySelector(\'.search-input\');\n      this.btnSubmit = this.querySelector(\'.btn-submit\');\n      this.btnClear = this.querySelector(\'.btn-clear\');\n      this.render = this.querySelector("[data-predictive-search-result]");\n      this.cachedResults = {};\n    }\n    connectedCallback() {\n      if (this.searchOffcanvas) {\n        this.offcanvasSearch();\n      }\n      if (this.enablePredictive) {\n        this.input.addEventListener("input", gspTheme.helper.debounce(event => {\n          this.onChange();\n        }, 300).bind(this));\n        this.reset();\n      }\n    }\n    getQuery() {\n      return this.input.value.trim();\n    }\n    onChange() {\n      const q = this.getQuery();\n      if (q.length) {\n        this.activeButtonSpin();\n        this.activeLoadingSection();\n        this.showRecommend(false);\n        if (this.btnClear) {\n          this.showBtnClear();\n        }\n        this.getSearchResults(q);\n      } else {\n        this.showRecommend();\n        this.render.innerHTML = \'\';\n      }\n    }\n    getSearchResults(searchQuery) {\n      const formattedQuery = searchQuery.replace(" ", "-").toLowerCase();\n      const unavailableProductsOption = this.dataset.unavailableProductsOption;\n      let searchFields = "title,product_type,vendor,variants.sku,variants.title,tag,body";\n      let type = this.dataset.searchType;\n      if (this.cachedResults[formattedQuery]) {\n        this.renderSearchResults(this.cachedResults[formattedQuery]);\n        return;\n      }\n      let fetchUrl = "".concat(window.gspSetting.routes.predictive_search_url, "?q=").concat(encodeURIComponent(searchQuery), "&resources[type]=").concat(type, "&resources[options][unavailable_products]=").concat(unavailableProductsOption, "&resources[options][fields]=").concat(searchFields, "&section_id=fetch__predictive-search");\n      fetch(fetchUrl).then(response => {\n        if (!response.ok) {\n          this.activeButtonSpin(false);\n          var error = new Error(response.status);\n          throw error;\n        }\n        return response.text();\n      }).then(responseText => {\n        const parser = new DOMParser();\n        const searchResultHtml = parser.parseFromString(responseText, "text/html").querySelector("#shopify-section-fetch__predictive-search").innerHTML;\n        this.cachedResults[formattedQuery] = searchResultHtml;\n        this.renderSearchResults(searchResultHtml);\n      }).catch(error => {\n        this.activeButtonSpin(false);\n        throw error;\n      });\n    }\n    renderSearchResults(searchResultsHtml) {\n      this.render.innerHTML = searchResultsHtml;\n      this.activeButtonSpin(false);\n      this.activeLoadingSection(false);\n    }\n    activeButtonSpin() {\n      let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.submitBtnSpin = this.btnSubmit.querySelector(\'.gsp-button__spin\');\n      this.submitBtnContent = this.btnSubmit.querySelector(\'.gsp-button__content\');\n      if (active) {\n        this.submitBtnSpin.classList.add(\'active\');\n        this.submitBtnContent.classList.remove(\'active\');\n      } else {\n        this.submitBtnContent.classList.add(\'active\');\n        this.submitBtnSpin.classList.remove(\'active\');\n      }\n    }\n    activeLoadingSection() {\n      let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const loading = this.render.querySelector(\'.gsp-loading-sections\');\n      if (loading) {\n        if (!active) {\n          loading.classList.add(\'d-none\');\n        } else {\n          loading.classList.remove(\'d-none\');\n        }\n      }\n    }\n    reset() {\n      let show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const _self = this;\n      if (_self.btnClear) {\n        _self.btnClear.addEventListener("click", event => {\n          _self.showBtnClear(false);\n          _self.render.innerHTML = \'\';\n          _self.input.focus();\n        });\n      }\n    }\n    showBtnClear() {\n      let show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (show) {\n        this.btnClear.classList.remove("d-none");\n      } else {\n        this.btnClear.classList.add("d-none");\n      }\n    }\n    showRecommend() {\n      let show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.recommend && show && this.recommend.classList.contains(\'d-none\')) {\n        this.recommend.classList.remove("d-none");\n      }\n      if (this.recommend && !show && !this.recommend.classList.contains(\'d-none\')) {\n        this.recommend.classList.add("d-none");\n      }\n    }\n    offcanvasSearch() {\n      gspEvents.subscribe("gsp-append", event => {\n        if (this.searchOffcanvas.classList.contains("d-none")) {\n          this.searchOffcanvas.classList.remove("d-none");\n        }\n      });\n      this.searchOffcanvas.addEventListener(\'shown.bs.offcanvas\', event => {\n        this.input.focus();\n      });\n    }\n  }\n  customElements.define("gsp-search-form", gspSearchForm);\n}\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/function/search-form.js?')},"./src/js/components/function/switch-layout.js":function(){eval("const gspTheme = window.gspTheme || {};\nclass gspSwitchLayout {\n  constructor() {\n    this.params = 'view-layout';\n    document.querySelectorAll('[data-gsl-current-layout]').forEach(e => {\n      this.init(e);\n    });\n  }\n  init(wrap) {\n    const main = wrap.closest(\".gsp-listing\");\n    const current_layout_url = this.getCurrentLayoutByUrl();\n    const current_layout = current_layout_url !== null ? current_layout_url : wrap.dataset.gslCurrentLayout;\n    this.process_switch_layout(main, wrap, current_layout);\n    this.switch_layout(main, wrap);\n    gspEvents.subscribe(\"load-post-finally\", append => {\n      this.refresh();\n    });\n  }\n  switch_layout(main, wrap) {\n    var _that = this;\n    wrap.querySelectorAll('.gsp-switch-layout-item').forEach(item => {\n      item.addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        const layout = e.currentTarget.dataset.gslTarget;\n        if (layout !== undefined) {\n          _that.process_switch_layout(main, wrap, layout);\n          if (typeof window.history.pushState === 'function') {\n            var title = document.title;\n            let currentUrl = new URL(window.location.href);\n            currentUrl.searchParams.set(_that.params, layout);\n            window.history.pushState(null, title, currentUrl);\n          }\n          GSP.animation.init();\n        }\n      });\n    });\n  }\n  process_switch_layout(main, wrap) {\n    let layout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"grid\";\n    wrap.querySelectorAll('.gsp-switch-layout-item').forEach(item => {\n      if (item.getAttribute('data-gsl-target') !== layout && item.classList.contains(\"active\")) {\n        item.classList.remove('active');\n      }\n      if (item.getAttribute('data-gsl-target') === layout && !item.classList.contains(\"active\")) {\n        item.classList.add('active');\n      }\n    });\n    if (main) {\n      main.setAttribute('data-gsl', layout);\n    }\n  }\n  getCurrentLayoutByUrl() {\n    const paramsCurrentUrl = this.getParamsCurrentUrl();\n    if (paramsCurrentUrl !== null) {\n      const paramsPage = paramsCurrentUrl.get(this.params);\n      if (paramsPage !== null) {\n        return paramsPage;\n      }\n    }\n    return null;\n  }\n  getParamsCurrentUrl() {\n    let $url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if ($url === null) {\n      $url = window.location.href;\n    }\n    const urlObj = new URL($url);\n    if (urlObj) {\n      return new URLSearchParams(urlObj.search);\n    }\n    return null;\n  }\n  refresh() {\n    document.querySelectorAll('[data-gsl-current-layout]').forEach(e => {\n      this.init(e);\n    });\n  }\n}\ngspTheme.switchLayout = new gspSwitchLayout();\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/function/switch-layout.js?")},"./src/js/components/gallery.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.gallery = {\n    init: function () {\n      const $singleGallery = 'a.view-single-image';\n      const $gallery = 'a[data-gallery]';\n      const $videoGallery = 'a.view-video';\n      const _self = this;\n      if ($($singleGallery).length || $($gallery).length || $($videoGallery).length) {\n        gspTheme.helper.loadAssetsNew('lightGalleryHandle', () => {\n          _self.lightGallery($singleGallery, $gallery, $videoGallery);\n        });\n      }\n    },\n    lightGallery: function ($singleGallery, $gallery, $videoGallery) {\n      $(document).on('click', $singleGallery, function (event) {\n        event.preventDefault();\n        var $this = $(this),\n          src = $this.attr('href'),\n          title = $this.attr('title');\n        lightGallery(this, {\n          plugins: [lgThumbnail, lgZoom],\n          dynamic: true,\n          hash: false,\n          dynamicEl: [{\n            src: src,\n            downloadUrl: src,\n            thumb: src,\n            subHtml: title\n          }],\n          index: 0\n        }).openGallery();\n      });\n\n      /**\n       * Apply: <a href=\"[FULL IMAGE]\" data-rel=\"lightGallery\" data-gallery-id=\"[GALLERY ID]\" data-thumb-src=\"[THUMB IMAGE]\">[CONTENT]</a>\n       */\n      $(document).on('click', $gallery, function (event) {\n        event.preventDefault();\n        var $this = $(this),\n          galleryId = $this.data('gallery'),\n          _data = [],\n          currentIndex = 0,\n          current_src = $(this).attr('href'),\n          current_thumb_src = $(this).data('thumb-src');\n        $('[data-gallery=\"' + galleryId + '\"]').each(function (index) {\n          var src = $(this).attr('href'),\n            thumb = $(this).data('thumb-src'),\n            subHtml = $(this).attr('title');\n          if (thumb === undefined) {\n            thumb = src;\n          }\n          if (src == current_src && thumb == current_thumb_src) {\n            currentIndex = index;\n          }\n          if (typeof subHtml == 'undefined') {\n            subHtml = '';\n          }\n          _data.push({\n            'src': src,\n            'downloadUrl': src,\n            'thumb': thumb,\n            'subHtml': subHtml\n          });\n        });\n        lightGallery(this, {\n          plugins: [lgThumbnail, lgZoom],\n          dynamic: true,\n          hash: false,\n          galleryId: galleryId,\n          dynamicEl: _data,\n          thumbWidth: 80,\n          index: currentIndex\n        }).openGallery();\n      });\n      $(document).on('click', $videoGallery, function (event) {\n        event.preventDefault();\n        var src = $(this).attr('href');\n        lightGallery(this, {\n          dynamic: true,\n          plugins: [lgThumbnail, lgZoom, lgVideo, lgVimeoThumbnail],\n          dynamicEl: [{\n            'src': src,\n            'thumb': '',\n            'subHtml': ''\n          }]\n        }).openGallery();\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.gallery.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/gallery.js?")},"./src/js/components/header.js":function(){eval("(function ($) {\n  \"use strict\";\n\n  GSP.headerSticky = {\n    scroll_offset_before: 0,\n    init: function () {\n      this.sticky();\n      this.scroll();\n      this.resize();\n      this.processSticky();\n      this.resetHeight();\n      this.megaMenuHover();\n      this.activeMenuParentMenu();\n      this.offcanvasMenu();\n    },\n    sticky: function () {\n      $('.header-sticky .sticky-area').each(function () {\n        var $this = $(this);\n        if (!$this.is(':visible')) {\n          return;\n        }\n        if (!$this.parent().hasClass('sticky-area-wrap')) {\n          $this.wrap('<div class=\"sticky-area-wrap\"></div>');\n        }\n        var $wrap = $this.parent();\n        $wrap.height($this.outerHeight());\n      });\n    },\n    resize: function () {\n      $(document).on('after_prevent_transition_resize', function () {\n        GSP.headerSticky.sticky();\n        GSP.headerSticky.processSticky();\n        GSP.headerSticky.resetHeight();\n      });\n    },\n    scroll: function () {\n      $(window).on('scroll', function () {\n        GSP.headerSticky.processSticky();\n      });\n    },\n    processSticky: function () {\n      var current_scroll_top = $(window).scrollTop();\n      var $parent = $('.main-header');\n      $('.header-sticky .sticky-area').each(function () {\n        var $this = $(this);\n        if (!$this.is(':visible')) {\n          return;\n        }\n        var $wrap = $this.parent(),\n          $header = $this.closest('.header-sticky'),\n          sticky_top = 0,\n          sticky_current_top = $wrap.offset().top,\n          borderWidth = $('body').css('border-width');\n        if (borderWidth !== '') {\n          sticky_top += parseInt(borderWidth);\n        }\n        if (sticky_current_top - sticky_top < current_scroll_top) {\n          $this.css('position', 'fixed');\n          $this.css('top', sticky_top + 'px');\n          $header.addClass('sticky');\n        } else {\n          if ($header.hasClass('sticky')) {\n            $this.css('position', '').css('top', '');\n            $header.removeClass('sticky');\n          }\n        }\n      });\n      if (GSP.headerSticky.scroll_offset_before > current_scroll_top) {\n        $('.header-sticky-smart .sticky-area').each(function () {\n          if ($(this).hasClass('header-hidden')) {\n            $(this).removeClass('header-hidden');\n          }\n        });\n      } else {\n        // down\n        $('.header-sticky-smart .sticky-area').each(function () {\n          var $wrapper = $(this).parent();\n          if ($wrapper.length) {\n            if (GSP.headerSticky.scroll_offset_before > $wrapper.offset().top + $(this).outerHeight() && !$(this).hasClass('header-hidden')) {\n              $(this).addClass('header-hidden');\n            }\n          }\n        });\n      }\n      GSP.headerSticky.scroll_offset_before = current_scroll_top;\n    },\n    resetHeight: function () {\n      $('.header-sticky .sticky-area').each(function () {\n        let $this = $(this),\n          $wrap = $this.closest('.sticky-area-wrap'),\n          $header = $this.closest('.header-sticky'),\n          isSticky = $header.hasClass('sticky');\n        if (isSticky) {\n          $header.removeClass('sticky');\n        }\n        $wrap.height($this.outerHeight());\n        if (isSticky) {\n          $header.addClass('sticky');\n        }\n      });\n    },\n    megaMenuHover: function () {\n      $('.gsp-menu-item__mega').on('mouseenter', function () {\n        $('.gsp-header__desktop').addClass('gsp-menu-item__mega-active');\n      }).on('mouseleave', function () {\n        $('.gsp-header__desktop').removeClass('gsp-menu-item__mega-active');\n      });\n      if (Shopify.designMode) {\n        document.addEventListener('shopify:block:select', function (event) {\n          const blockId = event.detail.blockId;\n          const blockElements = document.querySelectorAll(\".gsp-megamenu-block-\" + blockId);\n          if (!blockElements.length) return;\n          blockElements.forEach(block => {\n            const desktopContainer = block.closest('.gsp-header__desktop');\n            const menuParent = block.closest('.gsp-menu-item');\n            if (desktopContainer && menuParent && !menuParent.classList.contains('active-mega')) {\n              menuParent.classList.add('active-mega');\n            }\n          });\n        });\n        document.addEventListener('shopify:block:deselect', event => {\n          const blockId = event.detail.blockId;\n          const blockElements = document.querySelectorAll(\".gsp-megamenu-block-\" + blockId);\n          if (!blockElements.length) return;\n          blockElements.forEach(block => {\n            const desktopContainer = block.closest('.gsp-header__desktop');\n            const menuParent = block.closest('.gsp-menu-item');\n            if (desktopContainer && menuParent && menuParent.classList.contains('active-mega')) {\n              menuParent.classList.remove('active-mega');\n            }\n          });\n        });\n      }\n    },\n    activeMenuParentMenu: function () {\n      $('.gsp-submenu-link.gsp-menu-link-active').each(function () {\n        const submenuParent = $(this).closest('.gsp-submenu').closest('.gsp-submenu-item').children('.gsp-submenu-link');\n        const menuParent = $(this).closest('.gsp-menu-item').children('.gsp-menu-link');\n        if (submenuParent.length && !submenuParent.hasClass('gsp-menu-link-active')) {\n          submenuParent.addClass('gsp-menu-link-active');\n        }\n        if (menuParent.length && !menuParent.hasClass('gsp-menu-link-active')) {\n          menuParent.addClass('gsp-menu-link-active');\n        }\n      });\n    },\n    offcanvasMenu: function () {\n      const caret = $('.gsp-main-menu-mobile .caret');\n      caret.on('click', function (event) {\n        event.preventDefault();\n        const slick = $(this).closest('.gsp-menu-item.gsp-menu-item__mega').find('.slick-slider');\n        if (slick.length && slick.hasClass('slick-initialized')) {\n          slick.slick('refresh');\n        }\n      });\n    }\n  };\n  GSP.header = {\n    init: function () {\n      $('.header.disable-transition-all').removeClass('disable-transition-all');\n    }\n  };\n  $(document).ready(function () {\n    GSP.headerSticky.init();\n    GSP.header.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/header.js?")},"./src/js/components/helper.js":function(){eval('const gspTheme = window.gspTheme || {};\nclass gspHelper {\n  constructor() {\n    this.requestDefaultConfigs = {\n      mode: "same-origin",\n      credentials: "same-origin",\n      headers: {\n        "X-Requested-With": "XMLHttpRequest",\n        "Content-Type": "application/json"\n      }\n    };\n    this.sectionCache = new Map();\n  }\n  getRequestDefaultConfigs() {\n    return JSON.parse(JSON.stringify(this.requestDefaultConfigs));\n  }\n  getCookie(cookieName) {\n    const name = cookieName + "=";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookieArray = decodedCookie.split(";");\n    for (let i = 0; i < cookieArray.length; i++) {\n      let cookie = cookieArray[i];\n      while (cookie.charAt(0) === " ") {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return "";\n  }\n  setCookie(cookieName, cookieValue, expirationDays) {\n    var d = new Date();\n    d.setTime(d.getTime() + expirationDays * 24 * 60 * 60 * 1000);\n    var expires = "expires=" + d.toUTCString();\n    document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";\n  }\n  generateDomFromString(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "div";\n    const i = document.createElement(t);\n    return i.innerHTML = e, i;\n  }\n  fetchJSON(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getRequestDefaultConfigs();\n    return fetch(url, options).then(response => {\n      if (!response.ok) throw response;\n      return response.json();\n    });\n  }\n  fetchConfig() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'json\';\n    return {\n      method: \'POST\',\n      headers: {\n        \'Content-Type\': \'application/json\',\n        Accept: "application/".concat(type)\n      }\n    };\n  }\n  cache2() {\n    return new Map();\n  }\n  fetchJsonCache(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : requestDefaultConfigs;\n    const map2 = this.cache2();\n    return new Promise((resolve, reject) => {\n      if (map2.get(url)) return resolve(map2.get(url));\n      fetch(url, options).then(response => {\n        if (response.ok) {\n          const jsonResponse = response.json();\n          resolve(jsonResponse);\n          map2.set(url, jsonResponse);\n          return jsonResponse;\n        }\n        reject(response);\n      }).catch(reject);\n    });\n  }\n  fetchSection(sectionId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      url: sectionUrl,\n      pushState = false,\n      fromCache: useCache = false,\n      params: queryParams = {},\n      paramVars = {},\n      deleteParams = []\n    } = options;\n    return new Promise((resolve, reject) => {\n      const url = new URL(sectionUrl || window.location.href);\n      let currentUrl = new URL(sectionUrl || window.location.href);\n      url.searchParams.set("section_id", sectionId);\n      if (deleteParams.length > 0) {\n        deleteParams.forEach(param => {\n          url.searchParams.delete(param);\n          currentUrl.searchParams.delete(param);\n        });\n      }\n      Object.entries(queryParams).forEach(_ref => {\n        let [param, value] = _ref;\n        url.searchParams.set(param, value);\n        if (pushState) {\n          currentUrl.searchParams.set(param, value);\n        }\n      });\n      if (Object.keys(paramVars).length > 0) {\n        currentUrl.searchParams.delete(paramVars.param);\n        url.searchParams.delete(paramVars.param);\n        paramVars.values.forEach(value => {\n          url.searchParams.append(paramVars.param, value);\n          if (pushState) {\n            currentUrl.searchParams.append(paramVars.param, value);\n          }\n        });\n      }\n      if (useCache) {\n        const cachedSection = this.sectionCache.get(url);\n        if (cachedSection) {\n          return resolve(cachedSection);\n        }\n      }\n      fetch(url, this.getRequestDefaultConfigs()).then(response => {\n        if (response.ok) {\n          return response.text();\n        }\n        throw new Error("Failed to load section: ".concat(sectionId));\n      }).then(htmlContent => {\n        const sectionDom = this.generateDomFromString(htmlContent);\n        resolve(sectionDom);\n      }).catch(error => reject(error)).finally(() => {\n        if (pushState) {\n          var title = document.title;\n          if (typeof window.history.pushState === \'function\') {\n            window.history.pushState(null, title, currentUrl);\n          }\n        }\n      });\n    });\n  }\n  addEventDelegate(_ref2) {\n    let {\n      context: element = document.documentElement,\n      event: eventType = "click",\n      selector: targetSelector,\n      handler: eventHandler,\n      capture: useCapture = false\n    } = _ref2;\n    const delegateFunction = function (event) {\n      for (let targetElement = event.target; targetElement && targetElement !== this; targetElement = targetElement.parentNode) {\n        if (targetElement.matches(targetSelector)) {\n          eventHandler.call(targetElement, event, targetElement);\n          break;\n        }\n      }\n    };\n    element.addEventListener(eventType, delegateFunction, useCapture);\n    return () => {\n      element.removeEventListener(eventType, delegateFunction, useCapture);\n    };\n  }\n  debounce(originalFunction, delayTime) {\n    var _this = this;\n    let timeoutId;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => originalFunction.apply(_this, args), delayTime);\n    };\n  }\n  getIconSvg(icon) {\n    let iconBase = {\n      circle_xmark: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M175 175C184.4 165.7 199.6 165.7 208.1 175L255.1 222.1L303 175C312.4 165.7 327.6 165.7 336.1 175C346.3 184.4 346.3 199.6 336.1 208.1L289.9 255.1L336.1 303C346.3 312.4 346.3 327.6 336.1 336.1C327.6 346.3 312.4 346.3 303 336.1L255.1 289.9L208.1 336.1C199.6 346.3 184.4 346.3 175 336.1C165.7 327.6 165.7 312.4 175 303L222.1 255.1L175 208.1C165.7 199.6 165.7 184.4 175 175V175zM512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256zM256 48C141.1 48 48 141.1 48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48z"/></svg>\',\n      circle_check: \'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M243.8 339.8C232.9 350.7 215.1 350.7 204.2 339.8L140.2 275.8C129.3 264.9 129.3 247.1 140.2 236.2C151.1 225.3 168.9 225.3 179.8 236.2L224 280.4L332.2 172.2C343.1 161.3 360.9 161.3 371.8 172.2C382.7 183.1 382.7 200.9 371.8 211.8L243.8 339.8zM512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256zM256 48C141.1 48 48 141.1 48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48z"/></svg>\',\n      instagram: \' <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"></path></svg>\'\n    };\n    return icon !== \'\' ? iconBase[icon] : false;\n  }\n  ExtendObject(objectDefault, object) {\n    return {\n      ...objectDefault,\n      ...object\n    };\n  }\n  queryDomNodes() {\n    let selectors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n    return Object.entries(selectors).reduce((result, _ref3) => {\n      let [key, value] = _ref3;\n      const isStringSelector = typeof value === "string";\n      const queryMethod = isStringSelector ? "querySelector" : "querySelectorAll";\n      const selectorValue = isStringSelector ? value : value[0];\n      if (context) {\n        result[key] = context[queryMethod](selectorValue);\n      }\n      if (!isStringSelector && result[key]) {\n        result[key] = [...result[key]];\n      }\n      return result;\n    }, {});\n  }\n  getVariantFromOptionArray(product, optionsArray) {\n    this._validateProductStructure(product);\n    this._validateOptionsArray(optionsArray);\n    return product.variants.filter(function (variant) {\n      return optionsArray.every(function (option, index) {\n        return variant.options[index] === option;\n      });\n    })[0] || null;\n  }\n  _validateOptionsArray(optionsArray) {\n    if (Array.isArray(optionsArray) && typeof optionsArray[0] === "object") {\n      throw new Error(optionsArray + " is not a valid array of options.");\n    }\n  }\n  _validateProductStructure(product) {\n    if (typeof product !== "object") {\n      throw new TypeError(product + " is not an object.");\n    }\n    if (Object.keys(product).length === 0 && product.constructor === Object) {\n      throw new Error(product + " is empty.");\n    }\n  }\n  formatMoney(amount, template) {\n    if (typeof amount === "string") {\n      amount = amount.replace(".", "");\n    }\n    let formattedAmount = "";\n    const placeholderRegex = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n    const defaultTemplate = template || "${{amount}}";\n    switch (defaultTemplate.match(placeholderRegex)[1]) {\n      case "amount":\n        formattedAmount = this.formatNumberWithCommas(amount, 2);\n        break;\n      case "amount_no_decimals":\n        formattedAmount = this.formatNumberWithCommas(amount, 0);\n        break;\n      case "amount_with_comma_separator":\n        formattedAmount = this.formatNumberWithCommas(amount, 2, ".", ",");\n        break;\n      case "amount_no_decimals_with_comma_separator":\n        formattedAmount = this.formatNumberWithCommas(amount, 0, ".", ",");\n        break;\n    }\n    return defaultTemplate.replace(placeholderRegex, formattedAmount);\n  }\n  formatNumberWithCommas(number) {\n    let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let thousandsSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ",";\n    let decimalSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ".";\n    if (isNaN(number) || number === null) {\n      return 0;\n    }\n    const roundedNumber = (number / 100).toFixed(decimals);\n    const parts = roundedNumber.split(".");\n    return parts[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, "$1".concat(thousandsSeparator)) + (parts[1] ? decimalSeparator + parts[1] : "");\n  }\n  loadAssetsNew() {\n    let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    var assets = [];\n    var handle = window.gspThemeAssets[namespace];\n    if (typeof handle === "undefined" && !Object.keys(handle).length) {\n      return;\n    }\n    for (const key in handle) {\n      assets.push(handle[key]);\n    }\n    this.callFilesAsset(assets, namespace, callback);\n  }\n  callFilesAsset() {\n    let assets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let namespace = arguments.length > 1 ? arguments[1] : undefined;\n    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n    const namespaceIdentifier = namespace || Math.random().toString(36).slice(2);\n    if (!window.gspThemeLibs.loadjs.isDefined(namespace)) {\n      window.gspThemeLibs.loadjs(assets, namespaceIdentifier);\n    }\n    window.gspThemeLibs.loadjs.ready(namespaceIdentifier, callback);\n  }\n  loadFileAssets() {\n    var noop = function () {},\n      loadedScripts = {},\n      scriptCallbacks = {},\n      pendingCallbacks = {};\n    function executeCallbacks(nameSpace, status) {\n      if (nameSpace) {\n        var callbacks = pendingCallbacks[nameSpace];\n        if (scriptCallbacks[nameSpace] = status, callbacks) {\n          while (callbacks.length) {\n            callbacks[0](nameSpace, status);\n            callbacks.splice(0, 1);\n          }\n        }\n      }\n    }\n    function handleLoadResult(callback, errors) {\n      if (callback.call) {\n        callback = {\n          success: callback\n        };\n      }\n      errors.length ? (callback.error || noop)(errors) : (callback.success || noop)(callback);\n    }\n    function loadScript(url, onComplete, options, attempt) {\n      var element,\n        isCss = false,\n        documentRef = document,\n        asyncLoading = options.async,\n        maxRetries = (options.numRetries || 0) + 1,\n        beforeLoad = options.before || noop,\n        cleanUrl = url.replace(/[\\?|#].*$/, ""),\n        actualUrl = url.replace(/^(css|img)!/, "");\n      attempt = attempt || 0;\n      if (/(^css!|\\.css$)/.test(cleanUrl)) {\n        element = documentRef.createElement("link");\n        element.rel = "stylesheet";\n        element.href = actualUrl;\n        isCss = "hideFocus" in element && element.relList;\n        if (isCss) {\n          element.rel = "preload";\n          element.as = "style";\n        }\n      } else if (/(^img!|\\.(png|gif|jpg|svg|webp)$)/.test(cleanUrl)) {\n        element = documentRef.createElement("img");\n        element.src = actualUrl;\n      } else {\n        element = documentRef.createElement("script");\n        element.src = url;\n        element.async = asyncLoading === undefined || asyncLoading;\n      }\n      element.onload = element.onerror = element.onbeforeload = function (event) {\n        var eventType = event.type[0];\n        if (isCss) {\n          try {\n            if (!element.sheet.cssText.length) {\n              eventType = "e";\n            }\n          } catch (error) {\n            if (error.code !== 18) {\n              eventType = "e";\n            }\n          }\n        }\n        if (eventType === "e") {\n          if ((attempt += 1) < maxRetries) return loadScript(url, onComplete, options, attempt);\n        } else if (element.rel === "preload" && element.as === "style") {\n          element.rel = "stylesheet";\n        }\n        onComplete(url, eventType, event.defaultPrevented);\n      };\n      if (beforeLoad(url, element) !== false) {\n        documentRef.head.appendChild(element);\n      }\n    }\n    function loadResources(resources, namespace, options) {\n      var resourceName, config;\n      if (namespace && namespace.trim) {\n        resourceName = namespace;\n      }\n      config = (resourceName ? options : namespace) || {};\n      if (resourceName) {\n        if (resourceName in loadedScripts) throw "LoadJS";\n        loadedScripts[resourceName] = true;\n      }\n      function handleCompletion(successCallback, errorCallback) {\n        function processResources(scripts, callback, settings) {\n          var pendingScripts = scripts.push ? scripts : [scripts],\n            remaining = pendingScripts.length,\n            failedScripts = [];\n          function scriptHandler(script, status, preventDefault) {\n            if (status === "e") {\n              failedScripts.push(script);\n            } else if (status === "b" && !preventDefault) {\n              failedScripts.push(script);\n            }\n            if (--remaining === 0) {\n              callback(failedScripts);\n            }\n          }\n          for (var i = 0; i < pendingScripts.length; i++) {\n            loadScript(pendingScripts[i], scriptHandler, settings);\n          }\n        }\n        processResources(resources, function (errors) {\n          handleLoadResult(config, errors);\n          if (successCallback) {\n            handleLoadResult({\n              success: successCallback,\n              error: errorCallback\n            }, errors);\n          }\n          executeCallbacks(resourceName, errors);\n        }, config);\n      }\n      if (config.returnPromise) {\n        return new Promise(handleCompletion);\n      }\n      handleCompletion();\n    }\n    loadResources.ready = function (resources, callback) {\n      function checkReady(scripts, onReady) {\n        scripts = scripts.push ? scripts : [scripts];\n        var remaining = scripts.length,\n          failedScripts = [];\n        function scriptHandler(script, status) {\n          if (status.length) {\n            failedScripts.push(script);\n          }\n          if (--remaining === 0) {\n            onReady(failedScripts);\n          }\n        }\n        for (var i = 0; i < scripts.length; i++) {\n          var nameSpace = scripts[i];\n          var status = scriptCallbacks[nameSpace];\n          if (status) {\n            scriptHandler(nameSpace, status);\n          } else {\n            pendingCallbacks[nameSpace] = pendingCallbacks[nameSpace] || [];\n            pendingCallbacks[nameSpace].push(scriptHandler);\n          }\n        }\n      }\n      checkReady(resources, function (errors) {\n        handleLoadResult(callback, errors);\n      });\n      return loadResources;\n    };\n    loadResources.done = function (nameSpace) {\n      executeCallbacks(nameSpace, []);\n    };\n    loadResources.reset = function () {\n      loadedScripts = {};\n      scriptCallbacks = {};\n      pendingCallbacks = {};\n    };\n    loadResources.isDefined = function (nameSpace) {\n      return nameSpace in loadedScripts;\n    };\n    return loadResources;\n  }\n}\ngspTheme.helper = new gspHelper();\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/helper.js?')},"./src/js/components/html-shifting.js":function(){eval("var GSP = GSP || {};\n(function ($) {\n  'use strict';\n\n  GSP.htmlShifting = {\n    init: function () {\n      this.appendElement();\n      this.toggleVisibility();\n      this.widthElement();\n    },\n    widthElement: function () {\n      var wrapper = $(\"[data-gsp-attr-width]\");\n      wrapper.each(function () {\n        var $this = $(this);\n        var width = $this.width();\n        $this.css('--gsp-width-element', width + 'px');\n        $(window).on('resize', function () {\n          var width = $this.width();\n          $this.css('--gsp-width-element', width + 'px');\n        });\n      });\n    },\n    appendElement: function () {\n      var wrapper = $(\"[data-gsp-append]\");\n      wrapper.each(function () {\n        var $this = $(this);\n        var $selector = $this.data('gsp-append');\n        var $target = $($selector);\n        if ($target.length > 0) {\n          $target.append($this.prop('outerHTML'));\n          $this.remove();\n          window.gspEvents.emit(\"gsp-append\");\n        }\n      });\n    },\n    toggleVisibility: function () {\n      var wrapper = $('[data-gsp-toggle-visibility]');\n      wrapper.each(function () {\n        var $this = $(this);\n        if ($this.hasClass('d-none')) {\n          $this.removeClass('d-none');\n        }\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.htmlShifting.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/html-shifting.js?")},"./src/js/components/isotope.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.isotopeFilter = {\n    options_default: {},\n    init: function () {\n      const $isotope = $('[data-options-isotope]');\n      const $isotopeFilter = $('[data-isotope-filter]');\n      const _self = this;\n      if ($isotope.length || $isotopeFilter.length) {\n        gspTheme.helper.loadAssetsNew('isotopeHandle', () => {\n          _self.setupIsotope($isotope);\n          _self.setupIsotopeFilter($isotopeFilter);\n        });\n      }\n    },\n    setupIsotope: function ($isotope) {\n      var $this = $(this);\n      $isotope.each(function (index, el) {\n        var options = $(this).data('options-isotope');\n        options = $.extend({}, $this.options_default, options);\n        $(this).isotope(options);\n      });\n    },\n    setupIsotopeFilter: function ($isotopeFilter) {\n      $isotopeFilter.on('click', function () {\n        var $this = $(this),\n          $grid = $($this.data('isotope-target')),\n          $parent = $this.closest('[data-isotope-filter-parent]'),\n          filter = $this.data('isotope-filter');\n        $grid.isotope({\n          filter: filter\n        });\n        $parent.find('[data-isotope-filter]').removeClass('active');\n        $this.addClass('active');\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.isotopeFilter.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/isotope.js?")},"./src/js/components/loading.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.loading = {\n    init: function () {\n      this.pageLoading();\n    },\n    pageLoading: function () {\n      var that = this;\n      var window_load = false;\n      $(window).on('load', function () {\n        that.fadePageIn();\n        window_load = true;\n      });\n      setTimeout(function () {\n        if (!window_load) {\n          that.fadePageIn();\n        }\n      }, 2000);\n    },\n    fadePageIn: function () {\n      var preloadTime = 1000,\n        $loading = $('.gsp-loading-page');\n      if ($loading.length) {\n        $loading.animate({\n          opacity: 0,\n          delay: 200\n        }, preloadTime, \"linear\", function () {\n          $loading.css('display', 'none');\n        });\n      }\n    }\n  };\n  $(document).ready(function () {\n    GSP.loading.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/loading.js?")},"./src/js/components/mapbox.js":function(){eval("var APP = APP || {};\n(function ($) {\n  'use strict';\n\n  GSP.mapBox = {\n    init: function () {\n      const $map_box = $('.mapbox-gl');\n      const _self = this;\n      if ($map_box.length < 1) {\n        return;\n      }\n      gspTheme.helper.loadAssetsNew('mapboxHandle', () => {\n        _self.mapboxProcess($map_box);\n      });\n    },\n    mapboxProcess: function ($map_box) {\n      const _self = this;\n      mapboxgl.accessToken = window.gspSetting.access_token.mapbox;\n      var options_default = {\n        style: 'mapbox://styles/mapbox/standard',\n        zoom: 11\n      };\n      $map_box.each(function () {\n        var $this = $(this),\n          options = $this.data('mapbox-options'),\n          markers = $this.data('mapbox-marker');\n        options = $.extend({}, options_default, options);\n        var idContainer = $this.attr('id');\n        if (idContainer.length < 1) {\n          return;\n        }\n        options['container'] = idContainer;\n        var map = new mapboxgl.Map(options);\n        var marker = '';\n        var bounds = new mapboxgl.LngLatBounds();\n        $.each(markers, function () {\n          if (this.image !== undefined) {\n            const element = document.createElement('div');\n            element.className = 'gsp-map-marker';\n            const elementImage = document.createElement('img');\n            elementImage.src = this.image;\n            elementImage.alt = '';\n            element.appendChild(elementImage);\n            marker = new mapboxgl.Marker(element);\n          } else {\n            marker = new mapboxgl.Marker();\n          }\n          if (this.popup !== undefined) {\n            const title = this.popup.title !== undefined ? this.popup.title : '';\n            const desc = this.popup.desc !== undefined ? this.popup.desc : '';\n            const image = this.popup.image !== undefined ? this.popup.image : '';\n            const popup = new mapboxgl.Popup().setDOMContent(_self.popup_html(title, desc, image));\n            marker.setPopup(popup);\n          }\n          bounds.extend(this.position);\n          marker.setLngLat(this.position);\n          marker.addTo(map);\n        });\n        if (markers.length < 1) {\n          map.setCenter([-118.2744256, 34.0442113]);\n        }\n        if (markers.length === 1) {\n          map.setCenter(markers[0].position);\n        }\n        if (markers.length > 1) {\n          if (!bounds.isEmpty()) {\n            map.fitBounds(bounds, {\n              padding: 85,\n              animate: !1\n            });\n          }\n        }\n        map.addControl(new mapboxgl.NavigationControl());\n        map.on('load', function () {\n          map.resize();\n        });\n      });\n    },\n    popup_html: function () {\n      let $title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let $desc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      let $image = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      const elCard = document.createElement('div');\n      const elBody = document.createElement('div');\n      elCard.className = 'card border-0';\n      elBody.className = 'card-body p-0';\n      if ($image !== '') {\n        const elCardImage = document.createElement('div');\n        const elImage = document.createElement('img');\n        elCardImage.className = 'card-img-top mb-3';\n        elImage.src = $image;\n        elImage.className = 'mw-100';\n        elImage.alt = '';\n        elCardImage.appendChild(elImage);\n        elCard.appendChild(elCardImage);\n      }\n      if ($title !== '') {\n        const elTitle = document.createElement('h5');\n        elTitle.textContent = $title;\n        elBody.appendChild(elTitle);\n      }\n      if ($desc !== '') {\n        const elDesc = document.createElement('p');\n        elDesc.className = 'mb-0';\n        elDesc.textContent = $desc;\n        elBody.appendChild(elDesc);\n      }\n      elCard.appendChild(elBody);\n      return elCard;\n    }\n  };\n  $(document).ready(function () {\n    GSP.mapBox.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/mapbox.js?")},"./src/js/components/prevent-transition.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.preventTransitionResize = {\n    resizeTimer: null,\n    beforeWindowWidth: 0,\n    init: function () {\n      this.beforeWindowWidth = window.outerWidth;\n      this.resize();\n    },\n    resize: function () {\n      $(window).resize(function () {\n        let currentWidth = window.outerWidth;\n        if (currentWidth === GSP.preventTransitionResize.beforeWindowWidth) {\n          return;\n        }\n        GSP.preventTransitionResize.beforeWindowWidth = currentWidth;\n        clearTimeout(GSP.preventTransitionResize.resizeTimer);\n        $('body').addClass('disable-transition-all');\n        $(document).trigger('after_prevent_transition_resize');\n        GSP.preventTransitionResize.resizeTimer = setTimeout(function () {\n          $('body').removeClass('disable-transition-all');\n        }, 400);\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.preventTransitionResize.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/prevent-transition.js?")},"./src/js/components/product/card-swatch.js":function(){eval('function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nif (!customElements.get("pc-swatch")) {\n  class cardSwatch extends HTMLElement {\n    constructor() {\n      super();\n      _defineProperty(this, "getVariantFromActiveOptions", () => {\n        const {\n          productData: productData,\n          productData: {\n            initialVariant: initialVariant\n          },\n          activeOptionNodeByPosition: activeOptionNodeByPosition\n        } = this;\n        let options = {};\n        const positionMap = {\n          1: initialVariant.option1,\n          2: initialVariant.option2,\n          3: initialVariant.option3\n        };\n        Object.values(activeOptionNodeByPosition).forEach(node => {\n          const {\n            optionPosition: position,\n            value: value\n          } = node.dataset;\n          positionMap[position] = value;\n        });\n        options = Object.values(positionMap).filter(Boolean);\n        let variant = gspTheme.helper.getVariantFromOptionArray(productData, options);\n        if (!variant && this.hide_unavailable_product_options) {\n          options.pop();\n          variant = gspTheme.helper.getVariantFromOptionArray(productData, options);\n          if (!variant) {\n            options.pop();\n            variant = gspTheme.helper.getVariantFromOptionArray(productData, options);\n          }\n        }\n        this.currentVariant = variant;\n        return variant;\n      });\n      _defineProperty(this, "_getBaseUnit", () => 1 === this.currentVariant.unit_price_measurement.reference_value ? this.currentVariant.unit_price_measurement.reference_unit : this.currentVariant.unit_price_measurement.reference_value + this.currentVariant.unit_price_measurement.reference_unit);\n      this.selectors = {\n        container: "[data-pc-variant-picker]",\n        optionNodes: [".gsp-product-option-label"],\n        featuredImage: ".gsp-product-thumb-primary",\n        pcard: ".gsp-product-card",\n        variantDropdown: ".form-select",\n        priceWrapper: ".gsp-product-price",\n        salePrice: ".gsp-price-item-sale",\n        saleBadge: ".gsp-product-card__badge-sale",\n        unitPrice: ".gsp-product__price-unit-measurement",\n        compareAtPrice: [".gsp-price-item-regular"]\n      };\n      this.container = this.closest(this.selectors.container);\n      this.pcard = this.closest(this.selectors.pcard);\n      this.variantIdNode = this.pcard && this.pcard.querySelector(\'[name="id"]\');\n      this.featuredImage = this.pcard && this.pcard.querySelector(this.selectors.featuredImage);\n      this.domNodes = gspTheme.helper.queryDomNodes(this.selectors, this.pcard);\n      this.setupData();\n    }\n    async setupData() {\n      this.variantData = this.getVariantData();\n      this.productHandle = this.container.dataset.productHandle;\n      this.productData = await this.getProductJson();\n      this.activeOptionNodeByPosition = {};\n      this.hide_unavailable_product_options = true;\n      const {\n        variantIdNode: variantIdNode,\n        productData: productData,\n        productData: {\n          variants: variants\n        } = {}\n      } = this;\n      if (productData) {\n        let selectedVariantId = variantIdNode && Number(variantIdNode.value);\n        if (!selectedVariantId) {\n          selectedVariantId = productData.selected_or_first_available_variant && productData.selected_or_first_available_variant.id;\n        }\n        const selectedVariant = variants.find(variant => variant.id === selectedVariantId) || variants[0];\n        this.productData.initialVariant = selectedVariant;\n        if (!this.productData.selected_variant && variantIdNode && variantIdNode.dataset.selectedVariant) {\n          this.productData.selected_variant = variants.find(variant => variant.id === Number(variantIdNode && variantIdNode.dataset.selectedVariant));\n        }\n        this.updateOptionByVariant(selectedVariant);\n      }\n      if (this.domNodes.optionNodes) {\n        this.domNodes.optionNodes.forEach(optionNode => optionNode.addEventListener("click", this.handleSelectVariant.bind(this)));\n      }\n      if (this.domNodes.variantDropdown) {\n        this.domNodes.variantDropdown.addEventListener("change", this.handleSelectVariant.bind(this));\n      }\n    }\n    getVariantData() {\n      return this.variantData = this.variantData || JSON.parse(this.container && this.container.querySelector(\'[type="application/json"]\').textContent), this.variantData;\n    }\n    handleSelectVariant(event) {\n      let variant,\n        {\n          target: target\n        } = event;\n      if (target.tagName === "SELECT") {\n        target = target.querySelectorAll("option")[target.selectedIndex];\n      }\n      if (!target.classList.contains("gsp-product-option-label")) {\n        target = target.closest(".gsp-product-option-label");\n      }\n      const {\n        optionPosition: position\n      } = target.dataset;\n      const activeNode = this.activeOptionNodeByPosition[position];\n      this.toggleOptionNodeActive(activeNode, false);\n      this.toggleOptionNodeActive(target, true);\n      variant = this.getVariantFromActiveOptions();\n      const {\n        variantIdNode: variantIdNode\n      } = this;\n      if (variantIdNode) {\n        variantIdNode.setAttribute("value", String(variant.id));\n        variantIdNode.value = String(variant.id);\n      }\n      this.updateBySelectedVariant(variant);\n    }\n    updateBySelectedVariant(variant) {\n      if (variant) {\n        this.changeProductImage(variant);\n        this.updatePrice(variant);\n      }\n    }\n    getProductJson() {\n      let productUrl = "".concat(window.gspSetting.routes.root, "/products/").concat(this.productHandle, ".js");\n      productUrl = productUrl.replace("//", "/");\n      return fetch(productUrl).then(response => response.json());\n    }\n    changeProductImage(variant) {\n      const imageUrl = variant && variant.featured_image && variant.featured_image.src;\n      const {\n        featuredImage: featuredImageNode\n      } = this;\n      const imgElement = featuredImageNode && featuredImageNode.querySelector("img");\n      if (imgElement && imageUrl) {\n        imgElement.src = imageUrl;\n        imgElement.removeAttribute("srcset");\n      }\n    }\n    togglePreviewSwatch() {\n      const _self = this;\n      if (!_self.pcard.classList.contains("preview-swatch")) {\n        _self.pcard.classList.add(\'preview-swatch\');\n      }\n      document.querySelectorAll(this.selectors.pcard).forEach(ortherPcard => {\n        if (_self.pcard !== ortherPcard) {\n          if (ortherPcard.classList.contains("preview-swatch")) {\n            ortherPcard.classList.remove(\'preview-swatch\');\n          }\n        }\n      });\n    }\n    toggleOptionNodeActive(node, isActive) {\n      if (node) {\n        if (isActive) {\n          this.togglePreviewSwatch();\n          const {\n            optionPosition: position,\n            value: value\n          } = node.dataset;\n          this.activeOptionNodeByPosition[position] = node;\n          switch (node.tagName) {\n            case "INPUT":\n              node.checked = "checked";\n              node.dataset.selected = "true";\n              break;\n            case "OPTION":\n              node.dataset.selected = "true";\n              const selectElement = node.closest("select");\n              if (selectElement) {\n                selectElement.value = node.value;\n              }\n              break;\n            default:\n              node.dataset.selected = "true";\n              break;\n          }\n        } else {\n          if (!["default", "image", "color"].includes(node.dataset.optionType)) {\n            node.style.border = "";\n          }\n          node.checked = false;\n          delete node.dataset.selected;\n          const selectElement = node.closest("select");\n          if (selectElement) {\n            selectElement.value = "";\n          }\n        }\n      }\n    }\n    updateOptionByVariant(variant) {\n      Object.values(this.activeOptionNodeByPosition).forEach(node => this.toggleOptionNodeActive(node, false));\n      const {\n        optionNodes: optionNodes\n      } = this.domNodes;\n      const {\n        options: variantOptions = []\n      } = variant || {};\n      variantOptions.forEach((option, index) => {\n        const position = index + 1;\n        optionNodes.forEach(optionNode => {\n          const nodePosition = Number(optionNode.dataset.optionPosition);\n          const value = optionNode.dataset.value;\n          if (nodePosition === position && option === value) {\n            this.toggleOptionNodeActive(optionNode, true);\n          }\n        });\n      });\n      this.updatePrice(variant);\n    }\n    updatePrice(variant) {\n      const moneyFormat = window.gspSetting.money_format;\n      const salePriceNode = this.domNodes.salePrice;\n      const compareAtPriceNodes = this.domNodes.compareAtPrice;\n      const saleBadgeType = this.domNodes.priceWrapper.dataset.saleBadgeType;\n      const saleBadgeElement = this.domNodes.saleBadge;\n      const unitPriceElement = this.domNodes.unitPrice;\n      const {\n        compare_at_price: compareAtPrice,\n        price: price,\n        unit_price_measurement: unitPriceMeasurement\n      } = variant;\n      if (salePriceNode) {\n        salePriceNode.innerHTML = gspTheme.helper.formatMoney(price, moneyFormat);\n      }\n      if (compareAtPriceNodes && compareAtPriceNodes.length && compareAtPrice > price) {\n        compareAtPriceNodes.forEach(node => {\n          node.innerHTML = gspTheme.helper.formatMoney(compareAtPrice, moneyFormat);\n        });\n      } else {\n        compareAtPriceNodes.forEach(node => {\n          node.innerHTML = gspTheme.helper.formatMoney(price, moneyFormat);\n        });\n      }\n      if (saleBadgeElement && compareAtPrice > price && "text" !== saleBadgeType) {\n        let saleAmountText;\n        const percentDifference = 100 * (compareAtPrice - price) / compareAtPrice;\n        saleAmountText = Math.round(percentDifference) + "%";\n        saleBadgeElement.textContent = saleAmountText;\n      }\n      if (unitPriceMeasurement && unitPriceElement && this.currentVariant) {\n        unitPriceElement.classList.remove("d-none");\n        const unitPrice = unitPriceElement.querySelector(\'[data-unit-price]\');\n        const baseUnit = unitPriceElement.querySelector(\'[data-unit-price-base-unit]\');\n        const baseUnitHtml = "".concat(gspTheme.helper.formatMoney(this.currentVariant.unit_price, moneyFormat));\n        const unitPriceHtml = "".concat(this._getBaseUnit());\n        unitPrice.innerHTML = baseUnitHtml;\n        baseUnit.innerHTML = unitPriceHtml;\n      } else {\n        unitPriceElement.classList.add("d-none");\n      }\n    }\n  }\n  customElements.define("pc-swatch", cardSwatch);\n}\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/card-swatch.js?')},"./src/js/components/product/cart-addon.js":function(){eval('class gspCartAddonsDiscountCode extends HTMLElement {\n  constructor() {\n    super();\n    this.buttonSave = ".gsp-cart-addon-save";\n    this.inputAddon = this.querySelector(".form-control");\n    this.curentValue = false;\n    if (this.isCartPage) {\n      this.cartWrapper = document.querySelector(".gsp-main-cart");\n    } else {\n      this.cartWrapper = document.querySelector(".gsp-cart-drawer");\n    }\n    this.isCartPage = gspSetting.templateName === \'cart\';\n    this.init();\n  }\n  init() {\n    this.initInput();\n    this.saveAddonValue();\n  }\n  initInput() {\n    const valueInput = localStorage.getItem(\'gsp-discount-code\');\n    if (valueInput) {\n      this.curentValue = valueInput;\n      this.inputAddon.value = valueInput;\n      if (!this.isCartPage) {\n        this.toggleNoti(this.cartWrapper.querySelector(".cart-addon-discount-noti"), valueInput);\n      }\n    }\n  }\n  setInput() {\n    const discountCode = this.inputAddon.value;\n    if (!this.checkValueInput(this.curentValue, discountCode)) {\n      return;\n    }\n    localStorage.setItem(\'gsp-discount-code\', discountCode);\n    if (!this.isCartPage) {\n      this.toggleNoti(this.cartWrapper.querySelector(".cart-addon-discount-noti"), discountCode);\n    } else {\n      gspNotification.show({\n        message: window.gspString.cartPage.saveDiscountCode,\n        type: \'success\',\n        method: \'appendChild\',\n        icon: \'circle_check\',\n        sticky: true,\n        timeOut: 8000\n      });\n    }\n    this.curentValue = discountCode;\n  }\n  checkValueInput(currentValue, newValue) {\n    if (currentValue === newValue) {\n      if (this.isCartPage) {\n        gspNotification.show({\n          message: window.gspString.cartPage.valueHasNotChanged,\n          type: \'danger\',\n          method: \'appendChild\',\n          icon: \'circle_xmark\',\n          sticky: true,\n          timeOut: 8000\n        });\n      }\n      return false;\n    }\n    return true;\n  }\n  saveAddonValue() {\n    gspTheme.helper.addEventDelegate({\n      event: "click",\n      context: this,\n      selector: this.buttonSave,\n      handler: (e, target) => {\n        e.preventDefault();\n        this.setInput();\n      }\n    });\n  }\n  toggleNoti(noti, value) {\n    noti.style.display = value !== "" && noti ? "inline" : "none";\n  }\n}\ncustomElements.define("gsp-cart-addon-discount-code", gspCartAddonsDiscountCode);\nclass gspCartAddonsNote extends gspCartAddonsDiscountCode {\n  initInput() {\n    this.curentValue = this.inputAddon.value;\n    if (!this.isCartPage) {\n      this.toggleNoti(this.cartWrapper.querySelector(".cart-addon-note-noti"), this.inputAddon.value);\n    }\n  }\n  setInput() {\n    const noteValue = this.inputAddon.value;\n    if (!this.checkValueInput(this.curentValue, noteValue)) {\n      return;\n    }\n    const requestBody = JSON.stringify({\n      note: noteValue\n    });\n    fetch("".concat(window.gspSetting.routes.cart_update_url), {\n      ...gspTheme.helper.fetchConfig(),\n      body: requestBody\n    }).then(response => response.text()).then(data => {\n      const responseData = JSON.parse(data);\n      if (responseData.errors) {\n        if (this.isCartPage) {\n          gspNotification.show({\n            message: window.gspString.cartPage.saveNoteError,\n            type: \'danger\',\n            method: \'appendChild\',\n            icon: \'circle_xmark\',\n            sticky: true,\n            timeOut: 8000\n          });\n        }\n        return;\n      }\n      if (this.isCartPage) {\n        gspNotification.show({\n          message: window.gspString.cartPage.saveNoteSuccess,\n          type: \'success\',\n          method: \'appendChild\',\n          icon: \'circle_check\',\n          sticky: true,\n          timeOut: 8000\n        });\n      }\n      this.curentValue = noteValue;\n    }).catch(console.error).finally();\n    if (!this.isCartPage) {\n      this.toggleNoti(this.cartWrapper.querySelector(".cart-addon-note-noti"), noteValue);\n    }\n  }\n}\ncustomElements.define("gsp-cart-addon-note", gspCartAddonsNote);\nclass gspCartAddonsEstimateShipping extends HTMLElement {\n  constructor() {\n    super();\n    this.selectors = {\n      zipCode: \'[name="address[zip]"]\',\n      province: \'[name="address[province]"]\',\n      country: \'[name="address[country]"]\',\n      addressForm: \'[data-address="root"]\',\n      shippingMessage: ".gsp-cart-addon__shipping-rate",\n      calcShippingButton: ".gsp-cart-estimate-shipping-match"\n    };\n    this.initAddress = false;\n    this.domNodes = gspTheme.helper.queryDomNodes(this.selectors);\n    this.init();\n  }\n  init() {\n    this.initCountries();\n    gspTheme.helper.addEventDelegate({\n      selector: this.selectors.calcShippingButton,\n      context: this,\n      handler: (event, button) => {\n        event.preventDefault();\n        this.calcShipping(button);\n      }\n    });\n  }\n  initCountries() {\n    gspTheme.helper.fetchSection("fetch__country-options", {\n      url: window.gspSetting.base_url\n    }).then(response => {\n      const countrySelect = response.querySelector("#AddressCountry");\n      const options = countrySelect && countrySelect.querySelectorAll("option");\n      const addonCountrySelect = this.querySelector("#MadrressCountry select");\n      if (options && addonCountrySelect) {\n        options.forEach(option => {\n          addonCountrySelect.appendChild(option);\n        });\n      }\n      this.setupCountries();\n      this.initDataCountries = true;\n    }).catch(console.error);\n  }\n  setupCountries() {\n    if (!this.initAddress && Shopify && Shopify.CountryProvinceSelector) {\n      new Shopify.CountryProvinceSelector("AddressCountry", "AddressProvince", {\n        hideElement: "AddressProvinceContainer"\n      });\n      this.initAddress = true;\n    }\n  }\n  activeButtonSpin(button) {\n    let active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const buttonSpin = button.querySelector(".gsp-button__spin");\n    const actionButtonContent = button.querySelector(".gsp-button__content");\n    if (active) {\n      buttonSpin.classList.add(\'active\');\n      actionButtonContent.classList.remove(\'active\');\n    } else {\n      actionButtonContent.classList.add(\'active\');\n      buttonSpin.classList.remove(\'active\');\n    }\n  }\n  calcShipping(button) {\n    const _self = this;\n    _self.activeButtonSpin(button);\n    const zipCode = this.domNodes.zipCode && this.domNodes.zipCode.value && this.domNodes.zipCode.value.trim();\n    const country = this.domNodes.country.value;\n    const province = this.domNodes.province.value;\n    this.domNodes.shippingMessage.classList.remove("error");\n    this.domNodes.shippingMessage.innerHTML = "";\n    const showDeliveryDays = this.dataset.showDeliveryDays === "true";\n    fetch("".concat(window.Shopify.routes.root, "cart/shipping_rates.json?shipping_address%5Bzip%5D=").concat(zipCode, "&shipping_address%5Bcountry%5D=").concat(country, "&shipping_address%5Bprovince%5D=").concat(province)).then(response => response.json()).then(data => {\n      if (data && data.shipping_rates) {\n        const {\n          shipping_rates: shippingRates\n        } = data;\n        const {\n          shippingRatesResult,\n          noShippingRate\n        } = gspString;\n        if (shippingRates.length > 0) {\n          _self.activeButtonSpin(button, false);\n          const messageLabel = document.createElement("p");\n          messageLabel.classList.add("label", "mb-0", "text-heading");\n          messageLabel.innerHTML = "".concat(shippingRatesResult.replace("{{count}}", shippingRates.length), ":");\n          this.domNodes.shippingMessage.appendChild(messageLabel);\n          shippingRates.map(rate => {\n            const {\n              deliveryOne = "Day",\n              deliveryOther = "Days"\n            } = this.dataset;\n            let deliveryText = "";\n            if (rate.delivery_days.length > 0 && showDeliveryDays) {\n              let dayText = deliveryOne;\n              const firstDay = rate.delivery_days[0];\n              const lastDay = rate.delivery_days.at(-1);\n              if (firstDay > 1) {\n                dayText = deliveryOther;\n              }\n              deliveryText = firstDay === lastDay ? "(".concat(firstDay, " ").concat(dayText, ")") : "(".concat(firstDay, " - ").concat(lastDay, " ").concat(dayText, ")");\n            }\n            const rateItem = document.createElement("p");\n            rateItem.classList.add("shipping-item", "mb-0");\n            rateItem.innerHTML = "".concat(rate.name, ": <span>").concat(rate.price, " ").concat(Shopify.currency.active, "</span> ").concat(deliveryText);\n            this.domNodes.shippingMessage.appendChild(rateItem);\n          });\n        } else {\n          _self.activeButtonSpin(button, false);\n          this.domNodes.shippingMessage.innerHTML = "<p>".concat(noShippingRate, "</p>");\n        }\n      } else {\n        _self.activeButtonSpin(button, false);\n        Object.entries(data).map(entry => {\n          this.domNodes.shippingMessage.classList.add(entry[0] && entry[0].toLowerCase());\n          const errorMessage = "".concat(entry[1][0]);\n          const errorParagraph = document.createElement("p");\n          errorParagraph.classList.add("error");\n          errorParagraph.innerHTML = "".concat(errorMessage, "<sup>*</sup>");\n          this.domNodes.shippingMessage.appendChild(errorParagraph);\n        });\n      }\n    }).catch(console.error);\n  }\n}\ncustomElements.define("gsp-cart-addon-estimate-shipping", gspCartAddonsEstimateShipping);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/cart-addon.js?')},"./src/js/components/product/cart-drawer.js":function(){eval('class CartDrawer extends HTMLElement {\n  constructor() {\n    super();\n    this.toggleOverlayCartAddons();\n  }\n  open(target) {\n    const bsOffcanvas = new bootstrap.Offcanvas(target);\n    bsOffcanvas.show();\n  }\n  renderContents(data) {\n    this.open(this);\n    this.productId = data.id;\n    this.getSectionsToRender().forEach(section => {\n      const targetElement = section.selector ? document.querySelector(section.selector) : document.getElementById(section.id);\n      targetElement.innerHTML = this.getSectionInnerHTML(data.sections[section.id], section.selector);\n    });\n  }\n  getSectionInnerHTML(htmlString) {\n    let selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ".shopify-section";\n    return new DOMParser().parseFromString(htmlString, "text/html").querySelector(selector).innerHTML;\n  }\n  getSectionsToRender() {\n    return [{\n      id: "product-cart-drawer",\n      selector: "[data-gsp-cart-items]"\n    }, {\n      id: "product-cart-drawer",\n      selector: "[data-cart-subtotal]"\n    }, {\n      id: "product-cart-drawer",\n      selector: "[data-cart-action]"\n    }];\n  }\n  toggleOverlayCartAddons() {\n    if (this.querySelectorAll(".gsp-cart-addon-content")) {\n      this.querySelectorAll(".gsp-cart-addon-content").forEach(e => {\n        e.addEventListener(\'hidden.bs.collapse\', event => {\n          this.activeOverlay(false);\n        });\n        e.addEventListener(\'show.bs.collapse\', event => {\n          this.activeOverlay();\n        });\n      });\n    }\n  }\n  activeOverlay() {\n    let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const innerCart = this.querySelector(\'.gsp-cart-drawer-inner\');\n    if (active) {\n      if (!innerCart.classList.contains("showOverlay")) {\n        innerCart.classList.add(\'showOverlay\');\n      }\n    } else {\n      if (innerCart.classList.contains("showOverlay")) {\n        innerCart.classList.remove(\'showOverlay\');\n      }\n    }\n  }\n}\ncustomElements.define(\'gsp-cart-drawer\', CartDrawer);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/cart-drawer.js?')},"./src/js/components/product/cart.js":function(){eval('class GspCartTemplate extends HTMLElement {\n  constructor() {\n    super();\n    this.isCartPage = "cart" === window.gspSetting.templateName;\n    this.cartWrapper = document.querySelector(this.getSelectors().cartWrapper);\n    this.cartInner = document.querySelector(this.getSelectors().cartInner);\n    this.cartItems = this.querySelector(this.getSelectors().cartItems);\n    this.cartItem = this.getSelectors().cartItem;\n    const debouncedOnChange = gspTheme.helper.debounce(event => {\n      if ("id" !== event.target.name) {\n        this.onChange(event);\n      }\n    }, 300);\n    this.addEventListener("change", debouncedOnChange.bind(this));\n  }\n  onChange(event) {\n    this.updateQuantity(event.target.dataset.index, event.target.value, document.activeElement.getAttribute("name"));\n  }\n  removeAllItemsFromCart() {\n    gspLoadingBar.start(this.cartInner);\n    const requestBody = JSON.stringify({\n      sections: this.getSectionsToRender().map(section => section.section),\n      sections_url: window.location.pathname\n    });\n    fetch("".concat(window.gspSetting.routes.cart_clear_url), {\n      ...gspTheme.helper.fetchConfig(),\n      body: requestBody\n    }).then(response => response.text()).then(data => {\n      const responseData = JSON.parse(data);\n      if (responseData.errors) {\n        gspLoadingBar.remove(this.cartInner);\n        return;\n      }\n      gspUpdateCartCountInHeader.update();\n      if (this.cartWrapper) {\n        this.cartWrapper.classList.toggle("gsp-cart-empty", responseData.item_count === 0);\n      }\n      this.getSectionsToRender().forEach(section => {\n        const targetElement = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);\n        targetElement.innerHTML = this.getSectionInnerHTML(responseData.sections[section.section], section.selector);\n      });\n      gspEvents.emit("cart-update", {\n        ...responseData\n      });\n    }).catch(console.error).finally(() => {\n      gspLoadingBar.remove(this.cartInner);\n    });\n  }\n  updateQuantity(index, quantity, name) {\n    gspLoadingBar.start(this.cartInner);\n    const requestBody = JSON.stringify({\n      line: index,\n      quantity: quantity,\n      sections: this.getSectionsToRender().map(section => section.section),\n      sections_url: window.location.pathname\n    });\n    fetch("".concat(window.gspSetting.routes.cart_change_url), {\n      ...gspTheme.helper.fetchConfig(),\n      body: requestBody\n    }).then(response => response.text()).then(data => {\n      const responseData = JSON.parse(data);\n      let quantityElement = document.getElementById("gps-quantity-".concat(index));\n      const cartItem = document.querySelectorAll(this.cartItem);\n      if (responseData.errors) {\n        gspLoadingBar.remove(this.cartInner);\n        quantityElement.value = quantityElement.getAttribute("value");\n        this.updateLiveRegions(index, responseData.errors);\n        return;\n      }\n      gspUpdateCartCountInHeader.update();\n      if (this.cartWrapper) {\n        this.cartWrapper.classList.toggle("gsp-cart-empty", responseData.item_count === 0);\n      }\n      this.getSectionsToRender().forEach(section => {\n        const targetElement = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);\n        targetElement.innerHTML = this.getSectionInnerHTML(responseData.sections[section.section], section.selector);\n      });\n      const previousQuantity = responseData.items[index - 1] ? responseData.items[index - 1].quantity : undefined;\n      let errorMessage = "";\n      if (cartItem.length === responseData.items.length && previousQuantity !== parseInt(quantityElement.value)) {\n        errorMessage = previousQuantity === undefined ? window.gspString.cartError : window.gspString.quantityError.replace("[quantity]", previousQuantity);\n      }\n      this.updateLiveRegions(index, errorMessage);\n      gspEvents.emit("cart-update", {\n        ...responseData,\n        source: "main-cart-items"\n      });\n    }).catch(() => {}).finally(() => {\n      gspLoadingBar.remove(this.cartInner);\n    });\n  }\n  updateLiveRegions(index, errorMessage) {\n    let liveRegionElement = document.getElementById("gsp-cart-drawer-item-".concat(index));\n    let stickyNotification = false;\n    let methodNotification = \'afterEnd\';\n    if (this.isCartPage) {\n      liveRegionElement = document.body;\n      stickyNotification = true;\n      methodNotification = \'appendChild\';\n    }\n    if (errorMessage !== "" && liveRegionElement) {\n      gspNotification.show({\n        target: liveRegionElement,\n        message: errorMessage,\n        type: \'danger\',\n        method: methodNotification,\n        icon: \'circle_xmark\',\n        sticky: stickyNotification\n      });\n    }\n  }\n  getSectionInnerHTML(htmlString, selector) {\n    return new DOMParser().parseFromString(htmlString, "text/html").querySelector(selector).innerHTML;\n  }\n  getSelectors() {\n    return {\n      cartWrapper: \'gsp-cart\',\n      cartInner: \'.gsp-main-cart-inner\',\n      cartItems: "[data-gsp-cart-items]",\n      cartItem: ".gsp-main-cart-item"\n    };\n  }\n  getSectionsToRender() {\n    return [{\n      id: "gspCart",\n      section: "main-cart",\n      selector: "[data-gsp-cart-items]"\n    }, {\n      id: "gspCart",\n      section: "main-cart",\n      selector: "[data-cart-subtotal]"\n    }];\n  }\n}\nclass GspMainCartItemsChange extends GspCartTemplate {\n  getSectionsToRender() {\n    return [{\n      id: "gspCart",\n      section: "main-cart",\n      selector: "[data-gsp-cart-items]"\n    }, {\n      id: "gspCart",\n      section: "main-cart",\n      selector: "[data-cart-subtotal]"\n    }];\n  }\n}\ncustomElements.define("gsp-cart-items", GspMainCartItemsChange);\nclass GspCartDrawerItems extends GspCartTemplate {\n  getSelectors() {\n    return {\n      cartWrapper: "gsp-cart-drawer",\n      cartInner: ".gsp-cart-drawer-inner",\n      cartItems: "[data-gsp-cart-items]",\n      cartItem: ".gsp-cart-drawer-item"\n    };\n  }\n  getSectionsToRender() {\n    return [{\n      id: "gsp-cart-drawer",\n      section: "product-cart-drawer",\n      selector: "[data-gsp-cart-items]"\n    }, {\n      id: "gsp-cart-drawer",\n      section: "product-cart-drawer",\n      selector: "[data-cart-subtotal]"\n    }, {\n      id: "gsp-cart-drawer",\n      section: "product-cart-drawer",\n      selector: "[data-cart-action]"\n    }];\n  }\n}\ncustomElements.define("gsp-cart-drawer-items", GspCartDrawerItems);\nclass GspCartClear extends HTMLElement {\n  constructor() {\n    super();\n    this.cartItems = this.closest("gsp-cart-drawer-items") || this.closest("gsp-cart-items");\n    this.addEventListener("click", event => {\n      event.preventDefault();\n      const closestDrawerItems = this.cartItems;\n      closestDrawerItems.updateQuantity(this.dataset.index, 0);\n    });\n  }\n}\ncustomElements.define("gps-cart-item--clear", GspCartClear);\nclass GspCartClearAll extends HTMLElement {\n  constructor() {\n    super();\n    this.buttonClear = this.querySelector("button");\n    this.cartItems = this.closest("gsp-cart").querySelector("gsp-cart-items");\n    this.buttonClear.addEventListener("click", event => {\n      event.preventDefault();\n      const closestDrawerItems = this.cartItems;\n      closestDrawerItems.removeAllItemsFromCart();\n    });\n  }\n}\ncustomElements.define("gps-cart-clear-all", GspCartClearAll);\nclass gspFreeShippingGoal extends HTMLElement {\n  constructor() {\n    super();\n    this.selectors = {\n      leftToSpend: \'[data-left-to-spend]\'\n    };\n    this.goal = Number(this.dataset.minimumAmount) * Number(window.Shopify.currency.rate || 1) || 0;\n    this.progress = this.querySelector(\'.gsp-free-shipping-goal-bar\');\n    this.money_format = window.gspSetting.money_format;\n  }\n  connectedCallback() {\n    this.updateShippingGloal(Number(this.dataset.cartTotal));\n    gspEvents.subscribe("cart-update", event => {\n      this.updateShippingGloal(event.items_subtotal_price);\n    });\n  }\n  updateShippingGloal(amount) {\n    if (amount > 0) {\n      this.classList.remove(\'d-none\');\n    } else {\n      this.classList.add(\'d-none\');\n    }\n    this.cartTotal = amount / 100;\n    this.goalLeft = this.goal - this.cartTotal;\n    this.goalDone = this.goalLeft <= 0;\n    this.process = this.cartTotal * 100 / this.goal;\n    if (this.process >= 100) {\n      this.process = 100;\n    }\n    if (this.cartTotal >= this.goal) {\n      this.style.setProperty(\'--gsp-free-shipping-goal-process\', "".concat(this.process, "%"));\n      this.classList.add(\'done\');\n      this.progress.dataset.value = this.cartTotal;\n      this.progress.dataset.max = this.goal;\n    } else {\n      let spend = (this.goal - this.cartTotal) * 100;\n      this.querySelector(this.selectors.leftToSpend).innerHTML = gspTheme.helper.formatMoney(spend, this.money_format);\n      this.classList.remove(\'done\');\n      this.style.setProperty(\'--gsp-free-shipping-goal-process\', "".concat(this.process, "%"));\n      this.progress.dataset.value = this.cartTotal;\n      this.progress.dataset.max = this.goal;\n    }\n  }\n}\ncustomElements.define(\'gsp-free-shipping-goal\', gspFreeShippingGoal);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/cart.js?')},"./src/js/components/product/compare.js":function(){eval('const enable_compare = window.gspSetting.shop.enable_compare;\nconst gspTheme = window.gspTheme || {};\nclass compareManager {\n  constructor() {\n    this.isMainPage = false;\n    this.storageKey = "gsp-compare-products";\n    this.section = \'fetch__compare-item\';\n    this.sectionPreview = \'fetch__compare-item-preview\';\n    this.products = [];\n    this.listVariant = [];\n    this.enablePreviewCompare = gspSetting.shop.enable_preview_compare;\n    this.previewNodes = {};\n    this.mainNodes = {};\n    this.mainPage = "page.compare";\n    this.addedClass = "added";\n    this.selectors = {\n      wrapper: ".gsp-compare-container-wrapper",\n      loading: ".gsp-loading-sections",\n      noProducts: ".gsp-compare-no-products",\n      productItem: ".gsp-compare-item",\n      productVariant: ".gsp-compare-item-variant",\n      actionButton: ".gsp-product-actions-compare",\n      actionButtonSpin: false,\n      actionButtonContent: false,\n      toggleButtonPreview: ".gsp-toggle-compare-preview-button",\n      previewCanvas: document.querySelector(\'#gsp-offcanvas-compare-preview\'),\n      previewSlickSlide: ".gsp-compare-preview-slider",\n      removeButton: ".gsp-product-actions-remove-form-compare",\n      removeAll: ".gsp-compare-action-clear-all",\n      count: ".gsp-header-badge-compare-count"\n    };\n    this.isMainPage = gspSetting.template === this.mainPage;\n    this.bsOffcanvas = this.selectors.previewCanvas ? new bootstrap.Offcanvas(this.selectors.previewCanvas) : false;\n    this.updateListProduct();\n    this.init();\n  }\n  async init() {\n    if (this.isMainPage) {\n      await this.renderMainPage();\n    }\n    if (!this.isMainPage && this.products.length) {\n      this.toggleButtonShowPreview(true);\n      await this.renderPreview();\n    }\n    this.setActionButtonsState();\n    this.addEventToCompareButtonsAction();\n    this.removeItem();\n    this.removeAllItem();\n    this.updateCount();\n  }\n  updateListProduct() {\n    this.products = Array.from(new Set(Array.from(JSON.parse(localStorage.getItem(this.storageKey)) || [])));\n  }\n  getItemMainPage() {\n    return [{\n      id: "action",\n      tag: \'th\',\n      selector: ".gsp-compare-item-action"\n    }, {\n      id: "price",\n      tag: \'td\',\n      selector: ".gsp-compare-item-price"\n    }, {\n      id: "vendor",\n      tag: \'td\',\n      selector: ".gsp-compare-item-vendor"\n    }, {\n      id: "availability",\n      tag: \'td\',\n      selector: ".gsp-compare-item-availability"\n    }];\n  }\n  setItemMainPage(item, tag, productHandle) {\n    let node;\n    if (item) {\n      const fragment = document.createElement(tag);\n      fragment.setAttribute("data-product-handle", productHandle);\n      fragment.setAttribute("scope", \'col\');\n      fragment.innerHTML = item.outerHTML;\n      node = fragment;\n    }\n    return node;\n  }\n  createRowTableForVariant(variant, bodyTable) {\n    if (variant.length) {\n      return variant.map(async e => {\n        const newRowTable = document.createElement(\'tr\');\n        const newColTable = document.createElement(\'th\');\n        newRowTable.setAttribute("data-compare", e);\n        newColTable.classList.add("text-heading", "fs-18px", "fw-semibold");\n        newColTable.textContent = e;\n        newRowTable.appendChild(newColTable);\n        bodyTable.appendChild(newRowTable);\n      });\n    }\n  }\n  async renderMainPage() {\n    const container = document.querySelector(this.selectors.wrapper);\n    if (container) {\n      let hasProducts = true;\n      let tableBody = container.querySelector(\'tbody\');\n      if (this.products.length) {\n        const fetchPromises = this.products.map(async productHandle => {\n          await gspTheme.helper.fetchSection(this.section, {\n            url: "".concat(window.gspSetting.base_url, "products/").concat(productHandle)\n          }).then(response => {\n            if (response) {\n              hasProducts = false;\n            }\n            this.mainNodes[productHandle] = [];\n            this.getItemMainPage().forEach(i => {\n              let itemSelector = response.querySelector(i.selector);\n              this.mainNodes[productHandle][i.id] = this.setItemMainPage(itemSelector, i.tag, productHandle);\n            });\n            let variantWrap = response.querySelector(this.selectors.productVariant);\n            if (variantWrap) {\n              this.mainNodes[productHandle][\'variant\'] = [];\n              variantWrap.querySelectorAll(\'.gsp-compare-variant\').forEach(e => {\n                if (!this.listVariant.includes(e.dataset.variantCompare)) {\n                  this.listVariant.push(e.dataset.variantCompare);\n                }\n                this.mainNodes[productHandle][\'variant\'][e.dataset.variantCompare] = this.setItemMainPage(e, \'td\', productHandle);\n              });\n            }\n          }).catch(console.error);\n        });\n        await Promise.all(fetchPromises);\n        await Promise.all(this.createRowTableForVariant(this.listVariant, tableBody));\n        this.products.reverse().forEach(productHandle => {\n          this.getItemMainPage().forEach(i => {\n            if (this.mainNodes[productHandle][i.id]) {\n              let node = \'\';\n              const itemRender = container.querySelector("[data-compare=\'" + [i.id] + "\']");\n              node = this.mainNodes[productHandle][i.id];\n              itemRender.appendChild(node);\n            }\n          });\n          this.listVariant.forEach(e => {\n            let node = \'\';\n            const itemRender = container.querySelector("[data-compare=\'" + [e] + "\']");\n            if (this.mainNodes[productHandle][\'variant\'] && this.mainNodes[productHandle][\'variant\'][e]) {\n              node = this.mainNodes[productHandle][\'variant\'][e];\n              itemRender.appendChild(node);\n            } else {\n              var tdElement = document.createElement(\'td\');\n              tdElement.setAttribute("data-product-handle", productHandle);\n              tdElement.setAttribute("scope", \'col\');\n              tdElement.textContent = \'-\';\n              itemRender.appendChild(tdElement);\n            }\n          });\n        });\n      }\n      if (hasProducts) {\n        this.showNoProductsMessage();\n      }\n      this.hideLoadingSection(container);\n    }\n  }\n  removeAllItem() {\n    gspTheme.helper.addEventDelegate({\n      selector: this.selectors.removeAll,\n      handler: (e, button) => {\n        e.preventDefault();\n        GSP.slickSlider.removeItem(this.selectors.previewSlickSlide);\n        GSP.slickSlider.refresh(this.selectors.previewSlickSlide);\n        this.products = [];\n        this.updateCount();\n        this.saveToStorage();\n        if (!this.isMainPage) {\n          document.querySelectorAll(this.selectors.actionButton).forEach(otherButton => {\n            this.toggleActionButtonState(otherButton, false);\n          });\n        }\n      }\n    });\n  }\n  removeItem() {\n    gspTheme.helper.addEventDelegate({\n      selector: this.selectors.removeButton,\n      handler: (event, button) => {\n        event.preventDefault();\n        let productHandle = button && button.dataset.productHandle;\n        if (productHandle) {\n          this.removeFromStorage(productHandle);\n          this.updateCount();\n        }\n        if (!this.isMainPage && productHandle) {\n          let item = button && button.closest(this.selectors.productItem);\n          if (item) {\n            item.remove();\n          }\n          document.querySelectorAll(this.selectors.actionButton).forEach(otherButton => {\n            if (otherButton && otherButton.dataset.productHandle === productHandle) {\n              const otherState = !otherButton.classList.contains(this.addedClass);\n              this.toggleActionButtonState(otherButton, otherState);\n            }\n          });\n        }\n        if (this.isMainPage && productHandle) {\n          let wrapper = button && button.closest(this.selectors.wrapper);\n          wrapper.querySelectorAll(\'[data-product-handle="\' + productHandle + \'"]\').forEach(e => {\n            e.remove();\n          });\n          if (!this.products.length) {\n            this.showNoProductsMessage();\n          }\n        }\n      }\n    });\n  }\n  addEventToCompareButtonsAction() {\n    gspTheme.helper.addEventDelegate({\n      selector: this.selectors.actionButton,\n      handler: (event, button) => {\n        event.preventDefault();\n        this.updateListProduct();\n        const productHandle = button && button.dataset.productHandle;\n        const settingsButton = button.hasAttribute("data-compare-settings") && JSON.parse(button.dataset.compareSettings);\n        this.selectors.actionButtonSpin = button.querySelector(".gsp-button__spin");\n        this.selectors.actionButtonContent = button.querySelector(".gsp-button__content");\n        if (settingsButton && typeof settingsButton.enablePreviewCompare !== \'undefined\') {\n          this.enablePreviewCompare = settingsButton.enablePreviewCompare;\n        }\n        if (productHandle) {\n          const newState = !button.classList.contains(this.addedClass);\n          this.toggleActionButtonState(button, newState);\n          document.querySelectorAll(this.selectors.actionButton).forEach(otherButton => {\n            if (otherButton && otherButton.dataset.productHandle === productHandle && otherButton !== button) {\n              const otherState = !otherButton.classList.contains(this.addedClass);\n              this.toggleActionButtonState(otherButton, otherState);\n            }\n          });\n          this.renderPreview(newState, true);\n          this.updateCount();\n        }\n      }\n    });\n  }\n  async renderPreview() {\n    let newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let newEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const container = document.querySelector(this.selectors.wrapper);\n    if (container) {\n      let hasProducts = true;\n      if (newEvent) {\n        this.activeButtonSpin();\n      }\n      if (this.products.length) {\n        const fetchPromises = this.products.map(async productHandle => {\n          await gspTheme.helper.fetchSection(this.sectionPreview, {\n            url: "".concat(window.gspSetting.base_url, "products/").concat(productHandle)\n          }).then(response => {\n            const content = response.querySelector(this.selectors.productItem);\n            if (content) {\n              hasProducts = false;\n              this.previewNodes[productHandle] = content;\n            }\n          }).catch(console.error);\n        });\n        await Promise.all(fetchPromises);\n        GSP.slickSlider.removeItem(this.selectors.previewSlickSlide);\n        GSP.slickSlider.refresh(this.selectors.previewSlickSlide);\n        this.products.slice().reverse().forEach(productHandle => {\n          const node = this.previewNodes[productHandle];\n          if (node) {\n            GSP.slickSlider.addNewItem(this.selectors.previewSlickSlide, node);\n          }\n        });\n        if (newState && this.enablePreviewCompare) {\n          this.openPreview();\n        }\n      }\n      if (newEvent) {\n        this.activeButtonSpin(false);\n      }\n      this.hideLoadingSection(container);\n    }\n  }\n  toggleActionButtonState(button, state) {\n    const hasTooltip = button && button.getAttribute(\'data-bs-toggle\') === \'tooltip\';\n    const hasLabel = button && button.classList.contains("has-label");\n    const productHandle = button && button.dataset.productHandle;\n    const titleCompare = button && button.dataset.titleCompare;\n    const titleAddedCompare = button && button.dataset.titleAddedCompare;\n    if (state) {\n      this.addToStorage(productHandle);\n      button.classList.add(this.addedClass);\n      if (hasTooltip) {\n        this.updateTooltip(button, titleAddedCompare);\n      }\n      if (hasLabel) {\n        this.updateLabelActionButton(button, titleAddedCompare);\n      }\n    } else {\n      this.removeFromStorage(productHandle);\n      button.classList.remove(this.addedClass);\n      if (this.isMainPage || this.products.length) {\n        const item = button && button.closest(this.selectors.productItem);\n        if (hasTooltip) {\n          bootstrap.Tooltip.getInstance(button).hide();\n        }\n        if (item) {\n          const index = item.dataset.slickIndex;\n          GSP.slickSlider.removeItem(this.selectors.previewSlickSlide, index);\n        }\n      }\n      if (hasTooltip) {\n        this.updateTooltip(button, titleCompare);\n      }\n      if (hasLabel) {\n        this.updateLabelActionButton(button, titleCompare);\n      }\n    }\n    if (this.selectors.previewCanvas) {\n      if (this.products.length) {\n        this.toggleButtonShowPreview(true);\n      } else {\n        this.closePreview();\n        this.toggleButtonShowPreview(false);\n      }\n    }\n  }\n  updateLabelActionButton(button, text) {\n    const label = button.querySelector(\'.gsp-button__content span\');\n    if (label) {\n      label.textContent = text;\n    }\n  }\n  updateTooltip(button, text) {\n    button.setAttribute(\'data-bs-title\', text);\n    const tooltip = bootstrap.Tooltip.getInstance(button);\n    tooltip.setContent({\n      \'.tooltip-inner\': text\n    });\n  }\n  saveToStorage() {\n    this.products = Array.from(new Set(this.products));\n    localStorage.setItem(this.storageKey, JSON.stringify(this.products));\n  }\n  addToStorage(productHandle) {\n    if (productHandle && !this.products.includes(productHandle)) {\n      this.products.push(productHandle);\n      this.saveToStorage();\n    }\n  }\n  removeFromStorage(productHandle) {\n    this.products = this.products.filter(item => item !== productHandle);\n    this.saveToStorage();\n  }\n  setActionButtonsState() {\n    let $wrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const buttons = $wrapper ? $wrapper.querySelectorAll(this.selectors.actionButton) : document.querySelectorAll(this.selectors.actionButton);\n    buttons.forEach(button => {\n      const productHandle = button && button.dataset.productHandle;\n      if (productHandle && this.products.includes(productHandle) && button && !button.classList.contains(this.addedClass)) {\n        this.toggleActionButtonState(button, true);\n      }\n    });\n  }\n  openPreview() {\n    if (this.selectors.previewCanvas) {\n      this.bsOffcanvas.show();\n    }\n  }\n  closePreview() {\n    if (this.selectors.previewCanvas) {\n      this.bsOffcanvas.hide();\n    }\n  }\n  toggleButtonShowPreview() {\n    let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const toggleButton = document.querySelector(this.selectors.toggleButtonPreview);\n    if (active) {\n      if (toggleButton && !toggleButton.classList.contains("active")) {\n        toggleButton.classList.add(\'active\');\n      }\n    } else {\n      if (toggleButton && toggleButton.classList.contains("active")) {\n        toggleButton.classList.remove(\'active\');\n      }\n    }\n  }\n  activeButtonSpin() {\n    let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (active) {\n      this.selectors.actionButtonSpin.classList.add(\'active\');\n      this.selectors.actionButtonContent.classList.remove(\'active\');\n    } else {\n      this.selectors.actionButtonContent.classList.add(\'active\');\n      this.selectors.actionButtonSpin.classList.remove(\'active\');\n    }\n  }\n  hideLoadingSection() {\n    let $wrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const loading = $wrapper ? $wrapper.querySelector(this.selectors.loading) : document.querySelector(this.selectors.loading);\n    if (loading) {\n      loading.remove();\n    }\n  }\n  showNoProductsMessage() {\n    const container = document.querySelector(this.selectors.wrapper);\n    const noProductsMessage = document.querySelector(this.selectors.noProducts);\n    container.classList.add("d-none");\n    noProductsMessage.classList.remove("d-none");\n  }\n  updateCount() {\n    document.querySelectorAll(this.selectors.count).forEach(e => {\n      const count = this.products.length;\n      e.textContent = count;\n      count < 1 ? e.classList.add("d-none") : e.classList.remove("d-none");\n    });\n  }\n}\nif (enable_compare) {\n  gspTheme.compareManager = new compareManager();\n}\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/compare.js?')},"./src/js/components/product/global.js":function(){eval("class Event {\n  constructor() {\n    this.events = {};\n  }\n  get evts() {\n    return Object.keys(this.events);\n  }\n  subscribe(event, handler) {\n    this.events[event] = this.events[event] || [];\n    this.events[event].push(handler);\n    return () => this.unSubscribe(event, handler);\n  }\n  unSubscribe(event, handler) {\n    const handlers = this.events[event];\n    if (handlers && Array.isArray(handlers)) {\n      for (let i = 0; i < handlers.length; i++) {\n        if (handlers[i] === handler) {\n          handlers.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    (this.events[event] || []).forEach(handler => {\n      handler(...args);\n    });\n  }\n}\nwindow.gspEvents = window.gspEvents || new Event();\nconst gspEvents = window.gspEvents;\nclass Notification {\n  constructor() {\n    this.default = {\n      target: false,\n      message: false,\n      type: 'success',\n      method: 'append',\n      icon: '',\n      timeOut: 3000,\n      sticky: false\n    };\n  }\n  show(option) {\n    option = gspTheme.helper.ExtendObject(this.default, option);\n    var $classWrap = ['gsp-notification', 'type-' + option.type];\n    if (option.sticky) {\n      option.target = document.body;\n      $classWrap.push('gsp-notification-sticky');\n    }\n    if (option.target === false || option.message === false) {\n      return;\n    }\n    if (document.body.querySelector('.gsp-notification')) {\n      Notification.prototype.remove(document.body.querySelector('.gsp-notification'), 0);\n    }\n    var id = 'gsp-' + Math.random().toString(36).substr(2, 9);\n    var html = '<div id =\"' + id + '\" class=\"' + $classWrap.join(' ') + '\">';\n    if (option.icon !== '') {\n      html += '<span class=\"icon d-inline-block me-2\">' + gspTheme.helper.getIconSvg(option.icon) + '</span>';\n    }\n    html += option.message;\n    html += '</div>';\n    switch (option.method) {\n      case 'append':\n        option.target.append(html);\n        break;\n      case 'appendChild':\n        option.target.insertAdjacentHTML(\"afterbegin\", html);\n        break;\n      case 'afterEnd':\n        option.target.insertAdjacentHTML(\"afterend\", html);\n        break;\n      default:\n        option.target.innerHTML = html;\n    }\n    var notification = document.getElementById(id);\n    setTimeout(function () {\n      if (!notification.classList.contains('show')) {\n        notification.classList.add('show');\n      }\n    }, 250);\n    notification.addEventListener(\"click\", function (e) {\n      Notification.prototype.remove(notification, 0);\n    });\n    Notification.prototype.remove(notification, option.timeOut);\n  }\n  remove(notification, timeOut) {\n    setTimeout(function () {\n      if (!notification.classList.contains('hide')) {\n        notification.classList.add('hide');\n      }\n      if (notification.classList.contains('show')) {\n        notification.classList.remove('show');\n      }\n    }, timeOut);\n    setTimeout(function () {\n      notification.remove();\n    }, timeOut + 250);\n  }\n}\nwindow.gspNotification = window.gspNotification || new Notification();\nconst gspNotification = window.gspNotification;\nclass updateCartCountInHeader {\n  constructor() {\n    this.rootUrl = window.Shopify.routes.root;\n    this.cartCount = document.querySelectorAll(\".gsp-header-badge-cart-count\");\n  }\n  update() {\n    this.getCart().then(cartData => {\n      this.cartCount.forEach(element => {\n        if (cartData && typeof cartData.item_count !== 'undefined') {\n          element.textContent = cartData.item_count;\n        }\n      });\n    });\n  }\n  getCart() {\n    return gspTheme.helper.fetchJSON(this.rootUrl + \"cart.json\");\n  }\n}\nwindow.gspUpdateCartCountInHeader = window.gspUpdateCartCountInHeader || new updateCartCountInHeader();\nconst gspUpdateCartCountInHeader = window.gspUpdateCartCountInHeader;\nclass LoadingBar {\n  constructor() {}\n  start(target) {\n    let sticky = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!target.classList.contains('gspLoading__bar')) {\n      target.classList.add('gspLoading__bar');\n    }\n    if (!target.classList.contains('gspLoading')) {\n      target.classList.add('gspLoading');\n    }\n    if (!target.classList.contains('gspLoading__start')) {\n      target.classList.add('gspLoading__start');\n    }\n    if (target.classList.contains('gspLoading_finished')) {\n      target.classList.remove('gspLoading_finished');\n    }\n    if (sticky) {\n      target.classList.add('gspLoading_stiky');\n    }\n  }\n  remove(target) {\n    if (!target.classList.contains('gspLoading_finished')) {\n      target.classList.add('gspLoading_finished');\n    }\n    setTimeout(function () {\n      if (target.classList.contains('gspLoading')) {\n        target.classList.remove('gspLoading');\n      }\n    }, 300);\n  }\n}\nwindow.gspLoadingBar = window.gspLoadingBar || new LoadingBar();\nconst gspLoadingBar = window.gspLoadingBar;\nif (void 0 === window.Shopify) {\n  window.Shopify = {};\n}\nShopify.bind = function (func, context) {\n  return function () {\n    return func.apply(context, arguments);\n  };\n};\nShopify.setSelectorByValue = function (selectElement, value) {\n  for (var index = 0, length = selectElement.options.length; index < length; index++) {\n    var option = selectElement.options[index];\n    if (value == option.value || value == option.innerHTML) return selectElement.selectedIndex = index, index;\n  }\n};\nShopify.addListener = function (element, eventType, handler) {\n  element.addEventListener ? element.addEventListener(eventType, handler, !1) : element.attachEvent(\"on\" + eventType, handler);\n};\nShopify.CountryProvinceSelector = function (countryId, provinceId, options) {\n  this.countryEl = document.getElementById(countryId);\n  this.provinceEl = document.getElementById(provinceId);\n  this.provinceContainer = document.getElementById(options.hideElement || provinceId);\n  Shopify.addListener(this.countryEl, \"change\", Shopify.bind(this.countryHandler, this));\n  this.initCountry();\n  this.initProvince();\n};\nShopify.CountryProvinceSelector.prototype = {\n  initCountry: function () {\n    var defaultCountryValue = this.countryEl.getAttribute(\"data-default\");\n    Shopify.setSelectorByValue(this.countryEl, defaultCountryValue);\n    this.countryHandler();\n  },\n  initProvince: function () {\n    var defaultProvinceValue = this.provinceEl.getAttribute(\"data-default\");\n    if (defaultProvinceValue && this.provinceEl.options.length > 0) {\n      Shopify.setSelectorByValue(this.provinceEl, defaultProvinceValue);\n    }\n  },\n  countryHandler: function (event) {\n    var selectedOption = this.countryEl.options[this.countryEl.selectedIndex];\n    var provinceData = JSON.parse(selectedOption.getAttribute(\"data-provinces\"));\n    this.clearOptions(this.provinceEl);\n    if (provinceData && provinceData.length > 0) {\n      for (var index = 0; index < provinceData.length; index++) {\n        var option;\n        (option = document.createElement(\"option\")).value = provinceData[index][0];\n        option.innerHTML = provinceData[index][1];\n        this.provinceEl.appendChild(option);\n      }\n      this.provinceContainer.style.display = \"\";\n    } else {\n      this.provinceContainer.style.display = \"none\";\n    }\n  },\n  clearOptions: function (selectElement) {\n    while (selectElement.firstChild) {\n      selectElement.removeChild(selectElement.firstChild);\n    }\n  },\n  setOptions: function (selectElement, optionsArray) {\n    var index = 0;\n    for (optionsArray.length; index < optionsArray.length; index++) {\n      var option = document.createElement(\"option\");\n      option.value = optionsArray[index];\n      option.innerHTML = optionsArray[index];\n      selectElement.appendChild(option);\n    }\n  }\n};\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/global.js?")},"./src/js/components/product/main.js":function(){eval('function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nclass gspProduct {\n  constructor() {\n    if ("product" === window.gspSetting.templateName) {\n      this.addRecentViewedProduct();\n    }\n  }\n  addRecentViewedProduct() {\n    const recentViewedProductsCookie = gspTheme.helper.getCookie("gsp-recent-viewed-products");\n    let viewedProducts = recentViewedProductsCookie ? JSON.parse(recentViewedProductsCookie) : [];\n    const productHandle = window.gspSetting.shop.productHandle;\n    if (viewedProducts.indexOf(productHandle) === -1) {\n      viewedProducts.unshift(productHandle);\n      viewedProducts = viewedProducts.slice(0, 20);\n      gspTheme.helper.setCookie("gsp-recent-viewed-products", JSON.stringify(viewedProducts));\n    }\n  }\n}\ngspTheme.Product = new gspProduct();\nclass gspCollapseGroup {\n  constructor() {\n    this.collapseGroup = document.querySelectorAll("[data-gsp-collapse-group]");\n    this.setUp();\n  }\n  setUp() {\n    let currentCollapse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let currentkey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.collapseGroup.forEach(collapse => {\n      let key = collapse.getAttribute(\'data-gsp-collapse-group\');\n      let bootstrapCollapse = bootstrap.Collapse.getInstance(collapse);\n      if (bootstrapCollapse === null) {\n        bootstrapCollapse = new bootstrap.Collapse(collapse, {\n          toggle: false\n        });\n      }\n      if (currentCollapse == null) {\n        collapse.addEventListener(\'show.bs.collapse\', event => {\n          this.setUp(collapse, key);\n        });\n      }\n      if (currentCollapse !== null && currentCollapse !== collapse && currentkey === key) {\n        bootstrapCollapse.hide();\n      }\n    });\n  }\n}\ngspTheme.accordionGroup = new gspCollapseGroup();\nif (customElements.get("product-form") || customElements.define("product-form", class extends HTMLElement {\n  constructor() {\n    super();\n    this.form = this.querySelector(\'form\');\n    this.form.addEventListener(\'submit\', this.onSubmitHandler.bind(this));\n    this.cart = document.querySelector(\'gsp-cart-drawer\') || document.querySelector(\'gsp-cart\');\n    this.submitButton = this.querySelector(\'[type="submit"]\');\n    this.submitButtonSpin = this.submitButton.querySelector(\'.gsp-button__spin\');\n    this.submitButtonContent = this.submitButton.querySelector(\'.gsp-button__content\');\n    this.cartItems = document.querySelector(\'gsp-cart-drawer-items\') || false;\n    this.enableCartDrawer = window.gspSetting.shop.enable_add_to_cart_drawer;\n  }\n  onSubmitHandler(e) {\n    e.preventDefault();\n    if (this.submitButton.getAttribute(\'aria-disabled\') === \'true\') return;\n    this.activeButtonSpin();\n    this.error = false;\n    this.targetNotification = document.body;\n    this.stickyNotification = true;\n    const formValidationResult = this.validateCustomFields(this.form.closest(".gsp-product-info"));\n    if (formValidationResult && formValidationResult.length > 0) {\n      this.activeButtonSpin(false);\n      gspNotification.show({\n        message: window.gspString.requiredField,\n        type: \'danger\',\n        method: \'appendChild\',\n        icon: \'circle_xmark\',\n        sticky: true\n      });\n      return;\n    }\n    const config = gspTheme.helper.fetchConfig(\'javascript\');\n    config.headers[\'X-Requested-With\'] = \'XMLHttpRequest\';\n    delete config.headers[\'Content-Type\'];\n    const formData = new FormData(this.form);\n    if (this.cart) {\n      formData.append("sections", this.cart.getSectionsToRender().map(section => section.id));\n      formData.append("sections_url", window.location.pathname);\n    }\n    config.body = formData;\n    fetch("".concat(gspSetting.routes.cart_add_url), config).then(response => response.json()).then(async response => {\n      if (response.status) {\n        window.gspEvents.emit("cart-error", {\n          source: "product-form",\n          productVariantId: formData.get("id"),\n          errors: response.description,\n          message: response.message\n        });\n        this.error = true;\n        this.activeButtonSpin(false);\n        gspNotification.show({\n          message: response.message,\n          type: \'danger\',\n          method: \'appendChild\',\n          icon: \'circle_xmark\',\n          sticky: true\n        });\n        return;\n      }\n      const cartJson = await (await fetch("".concat(gspSetting.routes.cart_url), {\n        ...config\n      })).json();\n      cartJson[\'sections\'] = response[\'sections\'];\n      window.gspEvents.emit("cart-update", cartJson);\n      if (this.enableCartDrawer) {\n        this.cart.renderContents(response);\n      }\n    }).catch(e => {\n      console.error(e);\n    }).finally(() => {\n      if (!this.error) {\n        gspUpdateCartCountInHeader.update();\n        if (this.enableCartDrawer) {\n          this.targetNotification = this.cartItems;\n          this.stickyNotification = false;\n        }\n        gspNotification.show({\n          target: this.targetNotification,\n          message: window.gspString.itemAdded,\n          type: \'success\',\n          method: \'appendChild\',\n          icon: \'circle_check\',\n          sticky: this.stickyNotification\n        });\n      }\n      if (this.cart) {\n        if (this.cart.classList.contains("gsp-cart-empty")) {\n          this.cart.classList.remove("gsp-cart-empty");\n        }\n      }\n      this.activeButtonSpin(false);\n    });\n  }\n  validateCustomFields(formElement) {\n    const invalidFields = [];\n    if (!formElement) return invalidFields;\n    const customFields = formElement.querySelectorAll(\'[data-product-custom-field] [name][required]:not([hidden]):not([type="hidden"])\');\n    customFields.forEach(field => {\n      const wrap = field.closest("[data-product-custom-field]");\n      wrap.classList.remove("was-validated");\n      if (field.type === "radio") {\n        const radioGroup = formElement.querySelectorAll("input[name=\\"".concat(field.name, "\\"]"));\n        const isRadioChecked = Array.from(radioGroup).some(radio => radio.checked);\n        if (!isRadioChecked) {\n          invalidFields.push(field);\n          wrap.classList.add("was-validated");\n        }\n      } else if (!field.value) {\n        invalidFields.push(field);\n        wrap.classList.add("was-validated");\n      }\n    });\n    return invalidFields;\n  }\n  activeButtonSpin() {\n    let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (active) {\n      this.submitButton.setAttribute(\'aria-disabled\', true);\n      this.submitButtonSpin.classList.add(\'active\');\n      this.submitButtonContent.classList.remove(\'active\');\n    } else {\n      this.submitButton.removeAttribute(\'aria-disabled\');\n      this.submitButtonContent.classList.add(\'active\');\n      this.submitButtonSpin.classList.remove(\'active\');\n    }\n  }\n})) ;\nclass gspQuantityInput extends HTMLElement {\n  constructor() {\n    super(), this.init();\n  }\n  init() {\n    this.input = this.querySelector("input");\n    this.quantity = this.querySelectorAll(".gps-quantity-btn");\n    this.changeEvent = new Event("change", {\n      bubbles: true\n    });\n    this.querySelectorAll(".gps-quantity-btn").forEach(buttonElement => {\n      buttonElement.addEventListener("click", this.onButtonClick.bind(this));\n    });\n  }\n  onButtonClick(e) {\n    e.preventDefault();\n    let currentValue = this.input.value !== \'\' ? parseInt(this.input.value) : \'\';\n    const step = this.input.step !== \'\' ? parseInt(this.input.step) : 1;\n    const min = this.input.min !== \'\' ? parseInt(this.input.min) : 1;\n    const max = this.input.max !== \'\' ? this.input.max : false;\n    if (e.target.closest(".gps-quantity-btn").classList.contains(\'quantity-up\')) {\n      if (currentValue === \'\') {\n        this.input.value = 1;\n        return;\n      }\n      if (max) {\n        if (currentValue < max) {\n          currentValue += step;\n          this.input.value = currentValue;\n        }\n      } else {\n        currentValue += step;\n        this.input.value = currentValue;\n      }\n    }\n    if (e.target.closest(".gps-quantity-btn").classList.contains(\'quantity-down\')) {\n      if (currentValue > min && currentValue !== \'\') {\n        currentValue -= step;\n        this.input.value = currentValue;\n      }\n    }\n    if (currentValue !== this.input.value) {\n      this.input.dispatchEvent(this.changeEvent);\n    }\n  }\n}\ncustomElements.define("gps-quantity-input", gspQuantityInput);\nif (!customElements.get("variant-picker")) {\n  class gspVariantPicker extends HTMLElement {\n    constructor() {\n      super();\n      _defineProperty(this, "hideSoldOutAndUnavailableOptions", () => {\n        const soldOutClass = "gsp-product-option-item__soldout";\n        const unavailableClass = "gsp-product-option-item__unavailable";\n        const currentVariant = this.currentVariant;\n        const {\n          optionNodes\n        } = this.domNodes;\n        const {\n          productData\n        } = this;\n        const {\n          variants,\n          options\n        } = productData;\n        const totalOptions = options.length;\n        optionNodes.forEach(optionNode => {\n          const {\n            optionPosition,\n            value\n          } = optionNode.dataset;\n          const optionPositionNumber = Number(optionPosition);\n          const isOptionElement = optionNode.tagName === "OPTION";\n          let validVariants = [];\n          if (optionPositionNumber === totalOptions) {\n            const tempOptions = Array.from(currentVariant.options);\n            tempOptions[totalOptions - 1] = value;\n            validVariants.push(gspTheme.helper.getVariantFromOptionArray(productData, tempOptions));\n          } else {\n            validVariants = variants.filter(variant => {\n              return variant.options[optionPositionNumber - 1] === value && variant.options[optionPositionNumber - 2] === currentVariant["option" + (optionPositionNumber - 1)];\n            });\n          }\n          validVariants = validVariants.filter(Boolean);\n          if (validVariants.length) {\n            optionNode.classList.remove(unavailableClass);\n            if (isOptionElement) {\n              optionNode.removeAttribute("disabled");\n            }\n            const classToAdd = validVariants.every(variant => !variant.available) ? "add" : "remove";\n            optionNode.classList[classToAdd](soldOutClass);\n          } else {\n            optionNode.classList.add(unavailableClass);\n            if (isOptionElement) {\n              optionNode.setAttribute("disabled", "true");\n            }\n          }\n        });\n      });\n      _defineProperty(this, "_getBaseUnit", () => 1 === this.currentVariant.unit_price_measurement.reference_value ? this.currentVariant.unit_price_measurement.reference_unit : this.currentVariant.unit_price_measurement.reference_value + this.currentVariant.unit_price_measurement.reference_unit);\n      this.selectors = {\n        container: "[data-variant-picker]",\n        productInfo: ".gsp-product-info-wrapper",\n        error: ".gsp-product-form-message",\n        variantIdInput: \'[name="id"]\',\n        pickerFields: ["[data-picker-field]"],\n        optionNodes: [".gsp-product-option-item"],\n        productSku: "[data-variant-sku]",\n        productAvailability: "[data-availability]",\n        productWrapper: ".gsp-main-product-wrapper",\n        sliderFeatured: "#product-slider-featured",\n        sliderThumb: "#product-slider-thumb"\n      };\n      this.productWrapper = this.closest(this.selectors.productWrapper) ? this.closest(this.selectors.productWrapper) : false;\n      this.container = this.closest(this.selectors.container);\n      this.productInfo = this.closest(this.selectors.productInfo);\n      this.domNodes = gspTheme.helper.queryDomNodes(this.selectors, this.productInfo);\n      this.hasFeatured = this.productWrapper ? this.productWrapper.querySelector(this.selectors.sliderFeatured) : false;\n      this.hasThumb = this.productWrapper ? this.productWrapper.querySelector(this.selectors.sliderThumb) : false;\n      this.atcSticky = document.querySelector("gsp-atc-sticky");\n    }\n    connectedCallback() {\n      this.setupData();\n    }\n    async setupData() {\n      let themeProducts = (window._themeProducts || {})[this.container.dataset.productId];\n      this.productId = this.container.dataset.productId;\n      this.sectionId = this.container.dataset.section;\n      this.productUrl = this.container.dataset.productUrl;\n      this.productHandle = this.container.dataset.productHandle;\n      this.section = this.container.closest("[data-section-id=\\"".concat(this.sectionId, "\\"]"));\n      this.productData = Object.assign(await this.getProductJson(), themeProducts);\n      this.showFeaturedMedia = "true" === this.dataset.showFeaturedMedia;\n      this.enableVariantGroupImages = "true" === this.container.dataset.enableVariantGroupImages;\n      this.addEventListener("change", this.onVariantChange);\n      if (window.gspSetting.shop.enable_add_to_cart) {\n        const variantIdInputValue = this.productInfo.querySelector(this.selectors.variantIdInput).value;\n        this.currentVariant = this.productData.variants.find(variant => variant.id === Number(variantIdInputValue));\n        this.currentVariant && this.hideSoldOutAndUnavailableOptions();\n      }\n    }\n    getMediaGallery() {\n      if (this.currentVariant.featured_media && this.currentVariant.featured_media.position !== undefined) {\n        var variantImagePos = this.currentVariant.featured_media.position - 1;\n        if (this.hasFeatured) {\n          GSP.slickSlider.slickGoTo(this.selectors.sliderFeatured, variantImagePos);\n        }\n        if (this.hasThumb) {\n          GSP.slickSlider.slickGoTo(this.selectors.sliderThumb, variantImagePos);\n        }\n      }\n    }\n    onVariantChange() {\n      this.getSelectedOptions();\n      this.getSelectedVariant();\n      this.updateButton(true, "", false);\n      this.updatePickupAvailability();\n      if (this.currentVariant) {\n        this.getMediaGallery();\n        this.updateVariantInput();\n        this.updatePrice();\n        this.updateProductMeta();\n        this.hideSoldOutAndUnavailableOptions();\n        this.updateButton(!this.currentVariant.available, window.gspString.soldOut);\n        if (this.atcSticky) {\n          this.atcSticky.setVariant(this.currentVariant.id);\n          this.atcSticky.updateButton(this.currentVariant);\n        }\n      }\n      gspEvents.emit("".concat(this.productId, "__VARIANT_CHANGE"), this.currentVariant, this);\n    }\n    getSelectedVariant() {\n      let variant = gspTheme.helper.getVariantFromOptionArray(this.productData, this.options);\n      let tempOptions = [...this.options];\n      if (!variant) {\n        tempOptions.pop();\n        variant = gspTheme.helper.getVariantFromOptionArray(this.productData, tempOptions);\n        if (!variant) {\n          tempOptions.pop();\n          variant = gspTheme.helper.getVariantFromOptionArray(this.productData, tempOptions);\n        }\n        this.options = [...variant.options];\n        this.updateSelectedOptions();\n      }\n      this.currentVariant = variant;\n    }\n    updateVariantInput() {\n      document.querySelectorAll("#product-form-".concat(this.sectionId, ", #product-form-installment")).forEach(e => {\n        const variantInput = e.querySelector(this.selectors.variantIdInput);\n        variantInput.value = this.currentVariant.id;\n        variantInput.dispatchEvent(new Event("change", {\n          bubbles: true\n        }));\n      });\n    }\n    updateSelectedOptions() {\n      this.domNodes.pickerFields.forEach((e, i) => {\n        if (e.dataset.selectedValue !== this.options[i]) {\n          const inputElement = e.querySelector("input[value=\\"".concat(this.options[i].replace(/["\\\\]/g, "\\\\$&"), "\\"]"));\n          if (inputElement) {\n            inputElement.checked = true;\n            e.updateSelectedValue();\n          }\n        }\n      });\n    }\n    updateProductMeta() {\n      const {\n        available: isAvailable,\n        sku: productSku\n      } = this.currentVariant;\n      const {\n        inStock: inStockText,\n        unavailable: outOfStockText\n      } = window.gspString;\n      const productAvailabilityElement = this.section.querySelector(this.selectors.productAvailability);\n      const productSkuElement = this.section.querySelector(this.selectors.productSku);\n      if (productSkuElement) {\n        productSkuElement.textContent = productSku || "N/A";\n      }\n      if (productAvailabilityElement) {\n        const classToAdd = isAvailable ? "remove" : "add"; // Toggle class based on availability\n        productAvailabilityElement.textContent = isAvailable ? inStockText : outOfStockText;\n        productAvailabilityElement.classList[classToAdd]("m-product-availability--outofstock");\n      }\n    }\n    updateButton() {\n      let disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      let buttonText = arguments.length > 1 ? arguments[1] : undefined;\n      let disableDynamicCheckout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const productForms = document.querySelectorAll(".product-form-".concat(this.sectionId));\n      if (productForms) {\n        productForms.forEach(form => {\n          const addToCartButton = form.querySelector(\'[name="add"]\');\n          const dynamicCheckoutButton = form.querySelector(".gsp-product-dynamic-checkout");\n          const addToCartText = form.querySelector(\'[name="add"].gsp-product-actions-button .gsp-button__content\');\n          if (addToCartButton) {\n            if (disable) {\n              addToCartButton.setAttribute("disabled", "disabled");\n              addToCartButton.classList.add("disabled");\n              if (dynamicCheckoutButton) {\n                dynamicCheckoutButton.classList.add("disabled");\n              }\n              if (buttonText) {\n                addToCartText.textContent = buttonText;\n              }\n            } else {\n              addToCartButton.removeAttribute("disabled");\n              addToCartButton.classList.remove("disabled");\n              if (dynamicCheckoutButton) {\n                dynamicCheckoutButton.classList.remove("disabled");\n              }\n              addToCartText.textContent = window.gspString.addToCart;\n            }\n          }\n        });\n      }\n    }\n    getProductJson() {\n      return fetch(this.productUrl + ".js").then(response => response.json());\n    }\n    getSelectedOptions() {\n      const pickerFields = Array.from(this.querySelectorAll("[data-picker-field]"));\n      this.options = pickerFields.map(field => {\n        if (field.dataset.pickerField === "radio") {\n          return Array.from(field.querySelectorAll("input")).find(input => input.checked).value;\n        } else {\n          return field.querySelector("select").value;\n        }\n      });\n    }\n    updatePrice() {\n      const onSaleClass = "gsp-price-on-sale";\n      const soldOutClass = "gsp-price-sold-out";\n      const priceBlock = this.productInfo.querySelector(".gsp-main-product-block-price");\n      if (!priceBlock) return;\n      const moneyFormat = window.gspSetting.money_format;\n      const {\n        priceWrapper: priceElement,\n        salePrice: salePriceElement,\n        compareAtPrice: compareAtPriceElements,\n        saleBadge: saleBadgeElement,\n        unitPrice: unitPriceElement\n      } = gspTheme.helper.queryDomNodes({\n        priceWrapper: ".gsp-product-price",\n        salePrice: ".gsp-price-item-sale",\n        compareAtPrice: [".gsp-price-item-regular"],\n        saleBadge: ".gsp-product-card__badge-sale",\n        unitPrice: ".gsp-product__price-unit-measurement"\n      }, priceBlock);\n      const {\n        compare_at_price: compareAtPrice,\n        price: currentPrice,\n        unit_price_measurement: unitPriceMeasurement\n      } = this.currentVariant;\n      const saleBadgeType = priceElement.dataset.saleBadgeType;\n      const isSalePriceHigher = compareAtPrice && compareAtPrice > currentPrice;\n      const isSoldOut = !this.currentVariant.available;\n      if (isSalePriceHigher) {\n        priceElement.classList.add(onSaleClass);\n      } else {\n        priceElement.classList.remove(onSaleClass);\n      }\n      if (isSoldOut) {\n        priceElement.classList.add(soldOutClass);\n      } else {\n        priceElement.classList.remove(soldOutClass);\n      }\n      if (priceElement) {\n        priceElement.classList.remove("visibility-hidden");\n      }\n      if (salePriceElement) {\n        salePriceElement.innerHTML = gspTheme.helper.formatMoney(currentPrice, moneyFormat);\n      }\n      if (compareAtPriceElements.length && compareAtPrice > currentPrice) {\n        compareAtPriceElements.forEach(t => {\n          t.innerHTML = gspTheme.helper.formatMoney(compareAtPrice, moneyFormat);\n        });\n      } else {\n        compareAtPriceElements.forEach(t => {\n          t.innerHTML = gspTheme.helper.formatMoney(currentPrice, moneyFormat);\n        });\n      }\n      if (saleBadgeElement && compareAtPrice > currentPrice && "text" !== saleBadgeType) {\n        let saleAmountText;\n        const percentDifference = 100 * (compareAtPrice - currentPrice) / compareAtPrice;\n        saleAmountText = Math.round(percentDifference) + "%";\n        saleBadgeElement.textContent = saleAmountText;\n      }\n      if (unitPriceMeasurement && unitPriceElement) {\n        unitPriceElement.classList.remove("d-none");\n        const unitPrice = unitPriceElement.querySelector(\'[data-unit-price]\');\n        const baseUnit = unitPriceElement.querySelector(\'[data-unit-price-base-unit]\');\n        const baseUnitHtml = "".concat(gspTheme.helper.formatMoney(this.currentVariant.unit_price, moneyFormat));\n        const unitPriceHtml = "".concat(this._getBaseUnit());\n        unitPrice.innerHTML = baseUnitHtml;\n        baseUnit.innerHTML = unitPriceHtml;\n      } else {\n        unitPriceElement.classList.add("d-none");\n      }\n    }\n    updatePickupAvailability() {\n      const pickupAvailability = this.section.querySelector("pickup-availability");\n      if (pickupAvailability) {\n        if (this.currentVariant && this.currentVariant.available) {\n          pickupAvailability.fetchAvailability(this.currentVariant.id);\n        } else {\n          pickupAvailability.removeAttribute("available");\n          pickupAvailability.innerHTML = "";\n        }\n      }\n    }\n  }\n  customElements.define("variant-picker", gspVariantPicker);\n}\nif (!customElements.get("variant-button")) {\n  class VariantButton extends HTMLElement {\n    constructor() {\n      super();\n      this.selectedSpan = this.querySelector(".gsp-product-option-title .option-title--selected");\n      this.addEventListener("change", this.updateSelectedValue);\n    }\n    updateSelectedValue() {\n      this.value = Array.from(this.querySelectorAll("input")).find(input => input.checked).value;\n      this.setAttribute("data-selected-value", this.value);\n      if (this.selectedSpan) {\n        this.selectedSpan.textContent = this.value;\n      }\n    }\n  }\n  customElements.define("variant-button", VariantButton);\n  if (!customElements.get("variant-select")) {\n    class VariantSelect extends VariantButton {\n      constructor() {\n        super();\n      }\n      updateSelectedValue() {\n        this.value = this.querySelector("select").value;\n        this.setAttribute("data-selected-value", this.value);\n        if (this.selectedSpan) {\n          this.selectedSpan.textContent = this.value;\n        }\n      }\n    }\n    customElements.define("variant-select", VariantSelect);\n  }\n  if (!customElements.get("variant-image")) {\n    class VariantImage extends VariantButton {\n      constructor() {\n        super();\n      }\n    }\n    customElements.define("variant-image", VariantImage);\n  }\n  if (!customElements.get("variant-color")) {\n    class VariantColor extends VariantButton {\n      constructor() {\n        super();\n      }\n    }\n    customElements.define("variant-color", VariantColor);\n  }\n}\nclass DeferredMedia extends HTMLElement {\n  constructor() {\n    super();\n    const deferredPoster = this.querySelector(\'[id^="Deferred-Poster-"]\');\n    if (deferredPoster) {\n      deferredPoster.addEventListener("click", this.loadContent.bind(this));\n    }\n  }\n  loadContent() {\n    let forceAutoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.autoPlay = this.dataset.autoPlay === "true";\n    this.deferredPoster = this.querySelector(\'.deferred-media__poster\');\n    this.deferredThumb = this.querySelector(\'.gsp-image\');\n    if (!this.getAttribute("loaded")) {\n      const templateWrapper = document.createElement("div");\n      templateWrapper.appendChild(this.querySelector("template").content.firstElementChild.cloneNode(true));\n      this.setAttribute("loaded", true);\n      const deferredElement = this.appendChild(templateWrapper.querySelector(".gsp-product-media-template-inner"));\n      const wrapper = deferredElement.querySelector("video, model-viewer, iframe");\n      this.deferredPoster.classList.add(\'d-none\');\n      this.deferredThumb.classList.add(\'opacity-0\');\n      if (forceAutoplay) {\n        deferredElement.focus();\n        this.playVideo(deferredElement);\n      }\n    }\n  }\n  playVideo(e) {\n    if (!this.autoPlay) {\n      const wrapper = e.querySelector("video, model-viewer, iframe");\n      if (wrapper.classList.contains("js-youtube")) {\n        const separator = wrapper.src.indexOf("?") > -1 ? "&" : "?";\n        wrapper.src += separator + "autoplay=1&mute=1";\n      } else if (wrapper.classList.contains("js-vimeo")) {\n        const separator = wrapper.src.indexOf("?") > -1 ? "&" : "?";\n        wrapper.src += separator + "autoplay=1&muted=1";\n      } else {\n        wrapper.setAttribute("autoplay", "autoplay");\n        wrapper.play();\n      }\n    }\n  }\n}\ncustomElements.define("deferred-media", DeferredMedia);\ncustomElements.get("product-model") || customElements.define("product-model", class extends DeferredMedia {\n  constructor() {\n    super();\n  }\n  loadContent() {\n    super.loadContent(false);\n    window.Shopify.loadFeatures([{\n      name: "model-viewer-ui",\n      version: "1.0",\n      onLoad: this.setupModelViewerUI.bind(this)\n    }]);\n  }\n  setupModelViewerUI(e) {\n    if (!e) {\n      this.modelViewerUI = new Shopify.ModelViewerUI(this.querySelector("model-viewer"));\n    }\n  }\n});\nwindow.ProductModel = {\n  loadShopifyXR() {\n    Shopify.loadFeatures([{\n      name: "shopify-xr",\n      version: "1.0",\n      onLoad: this.setupShopifyXR.bind(this)\n    }]);\n  },\n  setupShopifyXR(e) {\n    if (!e) {\n      if (window.ShopifyXR) {\n        document.querySelectorAll(\'[id^="ModelJSON-"]\').forEach(e => {\n          window.ShopifyXR.addModels(JSON.parse(e.textContent));\n          e.remove();\n        });\n        window.ShopifyXR.setupXRElements();\n      } else {\n        document.addEventListener("shopify_xr_initialized", () => this.setupShopifyXR());\n      }\n    }\n  }\n};\nwindow.addEventListener("DOMContentLoaded", () => {\n  if (window.ProductModel) {\n    window.ProductModel.loadShopifyXR();\n  }\n});\nclass gspProductRecommendations extends HTMLElement {\n  constructor() {\n    super(), this.totalProducts = 0;\n    this.section = this.closest(\'.gsp-section__wrap\');\n    this.headerSection = this.section ? this.section.querySelector(\'.gsp-section-header__wrap\') : false;\n  }\n  connectedCallback() {\n    new IntersectionObserver((entries, observer) => {\n      if (!entries[0].isIntersecting) return;\n      observer.unobserve(this);\n      fetch(this.dataset.url).then(response => response.text()).then(html => {\n        const dom = gspTheme.helper.generateDomFromString(html);\n        const productRecommendations = dom.querySelector(this.tagName);\n        if (productRecommendations && productRecommendations.innerHTML.trim().length) {\n          this.innerHTML = productRecommendations.innerHTML;\n          this.totalProducts = productRecommendations.querySelectorAll(".gsp-product-card").length;\n          if (this.totalProducts > 0) {\n            GSP.bsScript.tooltips();\n            if (this.hasAttribute(\'data-gsp-animation\')) {\n              GSP.animation.init();\n            }\n            if (this.hasAttribute(\'data-gsp-slider\')) {\n              GSP.slickSlider.init();\n            }\n          } else {\n            this.toggleSection();\n          }\n        }\n      }).catch(error => {\n        console.error(e);\n      });\n    }, {\n      rootMargin: "0px 0px 100px 0px"\n    }).observe(this);\n  }\n  toggleSection() {\n    if (this.section) {\n      this.section.classList.toggle(\'no-product-recommendations\');\n    }\n    if (this.headerSection) {\n      this.headerSection.classList.toggle(\'d-none\');\n    }\n  }\n}\ncustomElements.define("gsp-product-recommendations", gspProductRecommendations);\nclass recentlyViewedProducts extends HTMLElement {\n  constructor() {\n    super();\n    let cookieValue = gspTheme.helper.getCookie("gsp-recent-viewed-products");\n    if (!cookieValue) return;\n    let currentProductHandle = this.dataset.productHandle;\n    this.productHandles = Array.from(new Set(JSON.parse(cookieValue)));\n    if (currentProductHandle) {\n      this.productHandles = this.productHandles.filter(handle => handle !== currentProductHandle);\n    }\n    let productLimit = 16;\n    if (this.dataset.productLimit) {\n      productLimit = this.dataset.productLimit;\n    }\n    this.section = this.closest(\'.gsp-section__wrap\');\n    this.headerSection = this.section ? this.section.querySelector(\'.gsp-section-header__wrap\') : false;\n    this.productList = new gspTheme.ProductList(this.getSelector(), this.productHandles, productLimit);\n    this.toggleSection();\n    this.renderProduct();\n  }\n  async renderProduct() {\n    if (this.productHandles.length) {\n      this.toggleSection();\n    }\n    await this.productList.renderList();\n  }\n  getSelector() {\n    return {\n      scope: this,\n      render: \'[data-gsp-product-list]\',\n      sectionId: "fetch__product-item-grid"\n    };\n  }\n  toggleSection() {\n    if (this.section) {\n      this.section.classList.toggle(\'no-product-recently-viewed\');\n    }\n    if (this.headerSection) {\n      this.headerSection.classList.toggle(\'d-none\');\n    }\n  }\n}\ncustomElements.define("gsp-recently-viewed-products", recentlyViewedProducts);\nclass gspAddToCartSticky extends HTMLElement {\n  constructor() {\n    super();\n    this.main = document.querySelector(\'.gsp-main-product__wrap\');\n    this.mainATC = this.main ? this.main.querySelector(\'.gsp-block__add_to_cart\') : false;\n    this.variantId = \'[name="id"]\';\n    this.variant = this.querySelector(\'.select-variant\');\n    this.variantData = this.getVariantData();\n  }\n  connectedCallback() {\n    this.processStickyAtc();\n    this.variant.addEventListener("change", () => {\n      const variantId = this.querySelector(this.variantId).value;\n      this.currentVariant = this.variantData.find(variant => variant.id === Number(variantId));\n      this.updateButton(this.currentVariant);\n    });\n  }\n  updateButton(currentVariant) {\n    this.updateButtonStatus(true, "", false);\n    if (currentVariant) {\n      this.updateButtonStatus(!currentVariant.available, window.gspString.soldOut);\n    } else {\n      this.updateButtonStatus(true, "", true);\n    }\n  }\n  updateButtonStatus() {\n    let isEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let buttonText = arguments.length > 1 ? arguments[1] : undefined;\n    let isVisible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const formContainer = this.querySelector(".atc-sticky-form");\n    if (!formContainer) return;\n    const addButton = formContainer.querySelector(\'[name="add"]\');\n    const buttonTextElement = formContainer.querySelector(\'[name="add"] .gsp-button__content span\');\n    if (addButton) {\n      if (isEnabled) {\n        addButton.setAttribute("disabled", "disabled");\n        if (buttonText) buttonTextElement.textContent = buttonText;\n      } else {\n        addButton.removeAttribute("disabled");\n        addButton.classList.remove("disabled");\n        buttonTextElement.textContent = window.gspString.addToCart;\n      }\n    }\n  }\n  processStickyAtc() {\n    const _self = this;\n    if (this.mainATC) {\n      var observer = new IntersectionObserver(function (entries) {\n        entries.forEach(function (entry) {\n          if (entry.isIntersecting) {\n            if (_self.classList.contains("active")) {\n              _self.classList.remove("active");\n              _self.recalculateSpacingForElements();\n            }\n          } else {\n            if (!_self.classList.contains("active")) {\n              _self.classList.add("active");\n              _self.recalculateSpacingForElements(_self.offsetHeight);\n            }\n          }\n        });\n      }, {\n        threshold: 0\n      });\n      observer.observe(_self.mainATC);\n    }\n  }\n  setVariant($variant) {\n    if (this.variant && $variant !== \'\') {\n      this.variant.value = $variant;\n    }\n  }\n  getVariantData() {\n    return this.variantData = this.variantData || JSON.parse(this.querySelector(\'[type="application/json"]\').textContent), this.variantData;\n  }\n  recalculateSpacingForElements() {\n    let height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const bodyTag = this.mainATC.closest(\'body\');\n    const htmlTag = this.mainATC.closest(\'html\');\n    const stt = bodyTag ? bodyTag.querySelector(\'.gsp-stt\') : false;\n    if (bodyTag) {\n      bodyTag.style.paddingBottom = height + \'px\';\n      if (height !== 0 && !bodyTag.classList.contains("atc-sticky-form-active")) {\n        bodyTag.classList.add("atc-sticky-form-active");\n      }\n      if (height === 0 && bodyTag.classList.contains("atc-sticky-form-active")) {\n        bodyTag.classList.remove("atc-sticky-form-active");\n      }\n    }\n    if (bodyTag && htmlTag && !htmlTag.classList.contains("pb-0") && height !== 0) {\n      htmlTag.classList.add("pb-0");\n    }\n    if (bodyTag && htmlTag && htmlTag.classList.contains("pb-0") && height === 0) {\n      htmlTag.classList.remove("pb-0");\n    }\n    if (stt) {\n      const transform = "translateY(-" + height + "px )";\n      stt.style.setProperty("transform", transform);\n    }\n  }\n}\ncustomElements.define("gsp-atc-sticky", gspAddToCartSticky);\ncustomElements.get("recipient-form") || customElements.define("recipient-form", class extends HTMLElement {\n  constructor() {\n    super();\n    _defineProperty(this, "unsubscribeCartUpdate", undefined);\n    _defineProperty(this, "unsubscribeVariantChange", undefined);\n    _defineProperty(this, "unsubscribeCartError", undefined);\n    this.checkbox = this.querySelector("#Recipient-Checkbox-".concat(this.dataset.sectionId));\n    this.checkbox.disabled = false;\n    this.controlField = this.querySelector("#Recipient-Control-".concat(this.dataset.sectionId));\n    this.controlField.disabled = true;\n    this.emailField = this.querySelector("#Recipient-email-".concat(this.dataset.sectionId));\n    this.nameField = this.querySelector("#Recipient-name-".concat(this.dataset.sectionId));\n    this.messageField = this.querySelector("#Recipient-message-".concat(this.dataset.sectionId));\n    this.sendOnField = this.querySelector("#Recipient-send-on-".concat(this.dataset.sectionId));\n    this.errorWrapper = this.querySelector(".product-form__recipient-error-message-wrapper");\n    this.errorList = this.errorWrapper && this.errorWrapper.querySelector("ul");\n    this.errorMessage = this.errorWrapper && this.errorWrapper.querySelector(".error-message");\n    this.defaultErrorMessage = this.errorMessage && this.errorMessage.innerText;\n    this.currentVariantId = this.dataset.productVariantId;\n    this.productId = this.dataset.productId;\n    this.formFields = this.querySelector(".gsp-recipient-form__fields");\n    this.addEventListener("change", this.onChange.bind(this));\n  }\n  connectedCallback() {\n    this.unsubscribeCartUpdate = gspEvents.subscribe("cart-update", event => {\n      this.resetRecipientForm();\n    });\n    this.unsubscribeCartUpdate = gspEvents.subscribe("".concat(this.productId, "__VARIANT_CHANGE"), event => {\n      this.currentVariantId = event.id;\n    });\n    this.unsubscribeCartError = gspEvents.subscribe("cart-error", event => {\n      if (event.source === "product-form" && event.productVariantId.toString() === this.currentVariantId) {\n        this.displayErrorMessage(event.message, event.errors);\n      }\n    });\n  }\n  disconnectedCallback() {\n    this.unsubscribeCartUpdate && this.unsubscribeCartUpdate();\n    this.unsubscribeVariantChange && this.unsubscribeVariantChange();\n    this.unsubscribeCartError && this.unsubscribeCartError();\n  }\n  onChange() {\n    if (!this.checkbox.checked) {\n      this.clearInputFields();\n      this.clearErrorMessage();\n    }\n  }\n  displayErrorMessage(message, errors) {\n    this.clearErrorMessage();\n    if (Object.keys(errors).length > 1) {\n      this.errorWrapper.hidden = false;\n    }\n    if (typeof errors === "object") {\n      this.errorMessage.innerText = this.defaultErrorMessage;\n      Object.entries(errors).forEach(_ref => {\n        let [key, errorText] = _ref;\n        const errorId = "RecipientForm-".concat(key, "-error-").concat(this.dataset.sectionId);\n        const fieldSelector = "#Recipient-".concat(key, "-").concat(this.dataset.sectionId);\n        const field = this.querySelector(fieldSelector);\n        const errorMsg = "".concat((field === null || field === void 0 ? void 0 : field.getAttribute("placeholder")) || key, " ").concat(errorText);\n        const errorElement = this.querySelector("#".concat(errorId));\n        if (!errorElement) return;\n        this.errorList && this.errorList.appendChild(this.createErrorListItem(fieldSelector, errorMsg));\n        errorElement.innerText = "".concat(errorMsg, ".");\n        const inputField = this["".concat(key, "Field")];\n        if (inputField) {\n          inputField.setAttribute("aria-invalid", true);\n          inputField.setAttribute("aria-describedby", errorId);\n          if (inputField && !inputField.classList.contains("is-invalid")) {\n            inputField.classList.add("is-invalid");\n          }\n        }\n      });\n      return;\n    }\n    this.errorMessage.innerText = errors;\n  }\n  createErrorListItem(fieldSelector, message) {\n    const listItem = document.createElement("li");\n    const link = document.createElement("a");\n    link.setAttribute("href", fieldSelector);\n    link.innerText = message;\n    listItem.appendChild(link);\n    listItem.className = "error-message";\n    return listItem;\n  }\n  clearInputFields() {\n    this.emailField.value = "";\n    this.nameField.value = "";\n    this.messageField.value = "";\n    this.sendOnField.value = "";\n  }\n  clearErrorMessage() {\n    this.errorWrapper.hidden = true;\n    if (this.errorList) {\n      this.errorList.innerHTML = "";\n    }\n    this.querySelectorAll(".gsp-recipient-form__fields .gsp-recipient-field").forEach(field => {\n      const input = field.querySelector(\'.form-field--input\');\n      const message = field.querySelector(\'.form-field--message\');\n      if (input && input.classList.contains("is-invalid")) {\n        input.classList.remove("is-invalid");\n      }\n      message.innerText = "";\n    });\n    [this.emailField, this.messageField, this.nameField, this.sendOnField].forEach(input => {\n      input.setAttribute("aria-invalid", false);\n      input.removeAttribute("aria-describedby");\n    });\n  }\n  resetRecipientForm() {\n    if (this.checkbox.checked) {\n      this.checkbox.checked = false;\n      this.clearInputFields();\n      this.clearErrorMessage();\n    }\n  }\n});\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/main.js?')},"./src/js/components/product/product-list.js":function(){eval('const gspTheme = window.gspTheme || {};\nclass gspRenderProductList {\n  constructor(selectors, productHandles) {\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.productHandles = productHandles;\n    this.productNodes = {};\n    this.hasAnimate = false;\n    this.selectors = selectors;\n    this.selectors = {\n      ...{\n        scope: document\n      },\n      ...selectors\n    };\n    if (limit !== null) {\n      this.productHandles = this.productHandles.slice(0, limit);\n    }\n  }\n  async renderList() {\n    const render = this.selectors.scope.querySelector(this.selectors.render);\n    if (render) {\n      let hasProducts = false;\n      if (this.productHandles.length) {\n        const fetchPromises = this.productHandles.map(async productHandle => {\n          await gspTheme.helper.fetchSection(this.selectors.sectionId, {\n            url: "".concat(window.gspSetting.base_url, "products/").concat(productHandle)\n          }).then(response => {\n            const content = response.querySelector(\'.gsp-product-list-item\');\n            if (content) {\n              if (render.dataset.classesItemInner) {\n                const $class = this.addClassItem(render.dataset.classesItemInner);\n                content.classList.add(...$class);\n              }\n              if (render.dataset.animateItemInner) {\n                content.setAttribute(\'data-animate\', render.dataset.animateItemInner);\n                this.hasAnimate = true;\n              }\n              hasProducts = true;\n              this.productNodes[productHandle] = content;\n            }\n          }).catch(console.error);\n        });\n        await Promise.all(fetchPromises);\n        this.productHandles.forEach(productHandle => {\n          const node = this.productNodes[productHandle];\n          if (node) {\n            render.appendChild(node);\n            GSP.bsScript.tooltips();\n            if (this.hasAnimate) {\n              GSP.animation.init();\n            }\n          }\n        });\n        if (render.classList.contains("slick-slider")) {\n          GSP.slickSlider.slickInit(render);\n        }\n      }\n      if (this.selectors.noProducts && !hasProducts) {\n        this.showNoProductsMessage();\n      }\n    }\n  }\n  showNoProductsMessage() {\n    const container = this.selectors.scope.querySelector(this.selectors.container);\n    const noProductsMessage = this.selectors.scope.querySelector(this.selectors.noProducts);\n    container.classList.add("d-none");\n    noProductsMessage.classList.remove("d-none");\n  }\n  addClassItem($str_class) {\n    if (typeof $str_class === "string" && $str_class !== \'\') {\n      return $str_class.split(" ").filter(function (v) {\n        return v !== "";\n      });\n    }\n    return [];\n  }\n}\ngspTheme.ProductList = gspRenderProductList;\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/product-list.js?')},"./src/js/components/product/product.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helper */ "./src/js/components/helper.js");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_helper__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./src/js/components/product/global.js");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_global__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _product_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./product-list */ "./src/js/components/product/product-list.js");\n/* harmony import */ var _product_list__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_product_list__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _cart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cart */ "./src/js/components/product/cart.js");\n/* harmony import */ var _cart__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_cart__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _cart_drawer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cart-drawer */ "./src/js/components/product/cart-drawer.js");\n/* harmony import */ var _cart_drawer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_cart_drawer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./main */ "./src/js/components/product/main.js");\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_main__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _wishlist__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./wishlist */ "./src/js/components/product/wishlist.js");\n/* harmony import */ var _wishlist__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_wishlist__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compare */ "./src/js/components/product/compare.js");\n/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_compare__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _quick_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./quick-view */ "./src/js/components/product/quick-view.js");\n/* harmony import */ var _quick_view__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_quick_view__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _card_swatch__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./card-swatch */ "./src/js/components/product/card-swatch.js");\n/* harmony import */ var _card_swatch__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_card_swatch__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _cart_addon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cart-addon */ "./src/js/components/product/cart-addon.js");\n/* harmony import */ var _cart_addon__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_cart_addon__WEBPACK_IMPORTED_MODULE_10__);\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/product.js?')},"./src/js/components/product/quick-view.js":function(){eval("const gspTheme = window.gspTheme || {};\nconst enableQuickView = window.gspSetting.shop.enable_quick_view;\nconst enableAddToCart = window.gspSetting.shop.enable_add_to_cart;\nconst showOptionMode = window.gspSetting.shop.select_options_mode;\nclass gspQuickView {\n  constructor() {\n    this.modal = document.querySelector(this.getTargetToAction().id);\n    this.modalBody = this.modal.querySelector(\".modal-body\");\n    this.modalClose = this.modal.querySelector(\".btn-close\");\n    this.sliderFeatured = \"#product-slider-featured\";\n    this.sliderThumb = \"#product-slider-thumb\";\n    this.hasFeatured = false;\n    this.hasThumb = false;\n    this.bsModal = new bootstrap.Modal(this.modal);\n    this.cartUpdate();\n    this.closeModal();\n    this.resetContentModal();\n    gspTheme.helper.addEventDelegate({\n      selector: this.getTargetToAction().target,\n      handler: (event, target) => {\n        event.preventDefault();\n        this.fetchHtml(target);\n      }\n    });\n  }\n  closeModal() {\n    const _self = this;\n    this.modalClose.addEventListener(\"click\", function (e) {\n      _self.hide();\n    });\n  }\n  cartUpdate() {\n    gspEvents.subscribe(\"cart-update\", event => {\n      this.hide();\n    });\n  }\n  refresh() {\n    if (this.modal != null) {\n      this.modal.addEventListener('shown.bs.modal', () => {\n        if (this.hasFeatured) {\n          GSP.slickSlider.refresh('.gsp-product-quickview #product-slider-featured');\n        }\n        if (this.hasThumb) {\n          GSP.slickSlider.refresh('.gsp-product-quickview #product-slider-thumb');\n        }\n        GSP.bsScript.tooltips();\n      });\n    }\n  }\n  async fetchHtml(target) {\n    const productHandle = target.dataset.productHandle;\n    if (!productHandle) {\n      return;\n    }\n    this.activeButtonSpin(target);\n    await gspTheme.helper.fetchSection(this.getTargetToAction().section, {\n      url: \"\".concat(window.gspSetting.base_url, \"products/\").concat(productHandle)\n    }).then(response => {\n      this.modalContent = response.querySelector(\".gsp-product-quickview\");\n      while (this.modalBody.firstChild) {\n        this.modalBody.removeChild(this.modalBody.firstChild);\n      }\n      this.modalBody.appendChild(this.modalContent);\n      if (target.hasAttribute('data-bs-toggle')) {\n        this.hideTooltipButton(target);\n      }\n    }).catch(console.error);\n    this.hasFeatured = this.modalBody.querySelector(this.sliderFeatured);\n    this.hasThumb = this.modalBody.querySelector(this.sliderThumb);\n    GSP.slickSlider.init();\n    this.open();\n    this.activeButtonSpin(target, false);\n  }\n  open() {\n    gspTheme.compareManager.setActionButtonsState(this.modal);\n    gspTheme.wishlistManager.setWishlistButtonsState(this.modal);\n    this.bsModal.show();\n    this.refresh();\n  }\n  hide() {\n    this.bsModal.hide();\n  }\n  resetContentModal() {\n    this.modal.addEventListener('hidden.bs.modal', event => {\n      this.modalBody.innerHTML = '';\n    });\n  }\n  activeButtonSpin(button) {\n    let active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.buttonSpin = button.querySelector('.gsp-button__spin');\n    this.buttonContent = button.querySelector('.gsp-button__content');\n    if (active) {\n      this.buttonSpin.classList.add('active');\n      this.buttonContent.classList.remove('active');\n    } else {\n      this.buttonContent.classList.add('active');\n      this.buttonSpin.classList.remove('active');\n    }\n  }\n  hideTooltipButton(button) {\n    const tooltip = bootstrap.Tooltip.getInstance(button);\n    if (tooltip) {\n      tooltip.hide();\n    }\n  }\n  getTargetToAction() {\n    return {\n      id: \"#gsp-modal__quick-view\",\n      section: 'fetch__product-quickview',\n      target: \".gsp-product-actions-quick-view\"\n    };\n  }\n}\nif (enableQuickView) {\n  gspTheme.ProductQuickView = new gspQuickView();\n}\nclass gspSelectOption extends gspQuickView {\n  getTargetToAction() {\n    return {\n      id: \"#gsp-modal__select-variant\",\n      section: 'fetch__product-select-variant',\n      target: \".gsp-product-card__select-option\"\n    };\n  }\n}\nif (enableAddToCart && showOptionMode === 'open_popup') {\n  gspTheme.ProductSelectOption = new gspSelectOption();\n}\nclass gspLoadMoreOptionSwatch extends gspQuickView {\n  getTargetToAction() {\n    return {\n      id: \"#gsp-modal__select-variant\",\n      section: 'fetch__product-select-variant',\n      target: \".gsp-product-option-label-load-more\"\n    };\n  }\n}\ngspTheme.ProductLoadMoreOptionSwatch = new gspLoadMoreOptionSwatch();\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/quick-view.js?")},"./src/js/components/product/wishlist.js":function(){eval('const gspTheme = window.gspTheme || {};\nconst enable_wishlist = window.gspSetting.shop.enable_wishlist;\nclass wishlistManager {\n  constructor() {\n    this.isWishlistPage = false;\n    this.storageKey = "gsp-wishlist-products";\n    this.products = [];\n    this.pageTemplate = "page.wishlist";\n    this.addedClass = "added";\n    this.selectors = {\n      container: ".gsp-wishlist-page-content__wrapper",\n      loading: ".gsp-wishlist-loading",\n      noProducts: ".gsp-wishlist-no-products",\n      productItem: ".gsp-product-list-item",\n      wishlistButton: ".gsp-product-actions-wishlist",\n      count: ".gsp-header-badge-wishlist-count"\n    };\n    this.updateListProduct();\n    this.isWishlistPage = gspSetting.template === this.pageTemplate;\n    this.init();\n  }\n  async init() {\n    if (this.isWishlistPage) {\n      await this.renderMainPage();\n    }\n    this.setWishlistButtonsState();\n    this.addEventToWishlistButtons();\n    this.updateWishlistCount();\n  }\n  updateListProduct() {\n    this.products = Array.from(new Set(Array.from(JSON.parse(localStorage.getItem(this.storageKey)) || [])));\n  }\n  addEventToWishlistButtons() {\n    gspTheme.helper.addEventDelegate({\n      selector: this.selectors.wishlistButton,\n      handler: (event, button) => {\n        event.preventDefault();\n        this.updateListProduct();\n        const productHandle = button && button.dataset.productHandle;\n        if (productHandle) {\n          const newState = !button.classList.contains(this.addedClass);\n          this.toggleButtonState(button, newState);\n          this.updateWishlistCount();\n          document.querySelectorAll(this.selectors.wishlistButton).forEach(otherButton => {\n            if (otherButton && otherButton.dataset.productHandle === productHandle && otherButton !== button) {\n              const otherState = !otherButton.classList.contains(this.addedClass);\n              this.toggleButtonState(otherButton, otherState);\n            }\n          });\n        }\n      }\n    });\n  }\n  toggleButtonState(button, state) {\n    const hasTooltip = button && button.getAttribute(\'data-bs-toggle\') === \'tooltip\';\n    const hasLabel = button && button.classList.contains("has-label");\n    const productHandle = button && button.dataset.productHandle;\n    const titleWishlist = button && button.dataset.titleWishlist;\n    const titleAddedWishlist = button && button.dataset.titleAddedWishlist;\n    if (state) {\n      this.addToWishlist(productHandle);\n      button.classList.add(this.addedClass);\n      if (hasTooltip) {\n        this.updateTooltip(button, titleAddedWishlist);\n      }\n      if (hasLabel) {\n        this.updateLabelActionButton(button, titleAddedWishlist);\n      }\n    } else {\n      this.removeFromWishlist(productHandle);\n      button.classList.remove(this.addedClass);\n      this.removeItemRender(button);\n      if (hasTooltip) {\n        this.updateTooltip(button, titleWishlist);\n      }\n      if (hasLabel) {\n        this.updateLabelActionButton(button, titleWishlist);\n      }\n    }\n  }\n  updateLabelActionButton(button, text) {\n    const label = button.querySelector(\'span\');\n    if (label) {\n      label.textContent = text;\n    }\n  }\n  updateTooltip(button, text) {\n    button.setAttribute(\'data-bs-title\', text);\n    const tooltip = bootstrap.Tooltip.getInstance(button);\n    tooltip.setContent({\n      \'.tooltip-inner\': text\n    });\n  }\n  saveToStorage() {\n    this.products = Array.from(new Set(this.products));\n    localStorage.setItem(this.storageKey, JSON.stringify(this.products));\n  }\n  addToWishlist(productHandle) {\n    if (productHandle && !this.products.includes(productHandle)) {\n      this.products.push(productHandle);\n      this.saveToStorage();\n    }\n  }\n  removeFromWishlist(productHandle) {\n    this.products = this.products.filter(item => item !== productHandle);\n    this.saveToStorage();\n  }\n  removeItemRender(button) {\n    if (this.isWishlistPage) {\n      const item = button && button.closest(this.selectors.productItem);\n      bootstrap.Tooltip.getInstance(button).hide();\n      if (item) {\n        item.remove();\n        if (!this.products.length) {\n          this.showNoProductsMessage();\n        }\n      }\n    }\n  }\n  updateWishlistCount() {\n    document.querySelectorAll(this.selectors.count).forEach(e => {\n      const count = this.products.length;\n      e.textContent = count;\n      count < 1 ? e.classList.add("d-none") : e.classList.remove("d-none");\n    });\n  }\n  setWishlistButtonsState() {\n    let $wrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const buttons = $wrapper ? $wrapper.querySelectorAll(this.selectors.wishlistButton) : document.querySelectorAll(this.selectors.wishlistButton);\n    buttons.forEach(button => {\n      const productHandle = button && button.dataset.productHandle;\n      if (productHandle && this.products.includes(productHandle) && button && !button.classList.contains(this.addedClass)) {\n        this.toggleButtonState(button, true);\n      }\n    });\n  }\n  hideLoadingSection() {\n    let $wrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const loading = $wrapper ? $wrapper.querySelector(this.selectors.loading) : document.querySelector(this.selectors.loading);\n    if (loading) {\n      loading.remove();\n    }\n  }\n  async renderMainPage() {\n    const container = document.querySelector(this.selectors.container);\n    if (container) {\n      const selectorRender = {\n        container: ".gsp-wishlist-page-content",\n        noProducts: this.selectors.noProducts,\n        render: \'[data-gsp-product-list]\',\n        sectionId: "fetch__product-item-grid"\n      };\n      const productList = new gspTheme.ProductList(selectorRender, this.products);\n      await productList.renderList();\n      this.hideLoadingSection(container);\n    }\n  }\n  showNoProductsMessage() {\n    const container = document.querySelector(this.selectors.container);\n    const noProductsMessage = document.querySelector(this.selectors.noProducts);\n    container.classList.add("d-none");\n    noProductsMessage.classList.remove("d-none");\n  }\n}\nif (enable_wishlist) {\n  gspTheme.wishlistManager = new wishlistManager();\n}\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/product/wishlist.js?')},"./src/js/components/register-assets.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.registerAssets = {\n    init: function () {\n      this.countdown();\n      this.instagram();\n      this.bulletOnePageScroll();\n      this.pickupAvailability();\n    },\n    countdown: function () {\n      if ($('[data-countdown]').length) {\n        gspTheme.helper.loadAssetsNew('countdownHandle');\n      }\n    },\n    instagram: function () {\n      if ($('gsp-instagram').length) {\n        gspTheme.helper.loadAssetsNew('instagramHandle');\n      }\n    },\n    bulletOnePageScroll: function () {\n      if (document.querySelector('section.gsp-bullet-one-page-scroll')) {\n        gspTheme.helper.loadAssetsNew('bulletOnePageScrollHandle');\n      }\n    },\n    pickupAvailability: function () {\n      if ($('pickup-availability').length /*|| $('.gsp-product-actions-quick-view').length*/) {\n        gspTheme.helper.loadAssetsNew('pickupAvailabilityHandle');\n      }\n    }\n  };\n  $(document).ready(function () {\n    GSP.registerAssets.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/register-assets.js?")},"./src/js/components/search.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.search = {\n    init: function () {\n      this.headerSearchFocus();\n    },\n    headerSearchFocus: function () {\n      let $input = $('.gsp-header-addons-item-link__show-full input');\n      const clickEvent = new MouseEvent('click', {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n      $input.on('focus', function () {\n        this.closest('a').dispatchEvent(clickEvent);\n      });\n      $input.on('keydown', function (event) {\n        event.preventDefault();\n        this.closest('a').dispatchEvent(clickEvent);\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.search.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/search.js?")},"./src/js/components/sticky.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.sticky = {\n    init: function () {\n      let header = $('.gsp-header__wrap.header-sticky');\n      let header_sticky_height = 0;\n      if (window.matchMedia('(max-width: 991px)').matches) {\n        return;\n      }\n      if (header.length > 0) {\n        header_sticky_height = header.outerHeight();\n      }\n      $('.gsp-sidebar.sidebar-sticky > .gsp-sidebar-inner').hcSticky({\n        stickTo: '.gsp-sidebar.sidebar-sticky',\n        top: header_sticky_height\n      });\n      $('.gsp-product-info.sticky > .gsp-product-info-wrapper').hcSticky({\n        stickTo: '.gsp-product-info.sticky',\n        top: header_sticky_height\n      });\n      $('.gsp-main-product-media.sticky > .gsp-main-product-media-wrapper').hcSticky({\n        stickTo: '.gsp-main-product-media.sticky',\n        top: header_sticky_height\n      });\n    },\n    refresh: function ($selector) {\n      let stickyElement = $($selector);\n      stickyElement.hcSticky('refresh');\n    }\n  };\n  $(document).ready(function () {\n    GSP.sticky.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/sticky.js?")},"./src/js/components/tabs.js":function(){eval("(function ($) {\n  'use strict';\n\n  GSP.tabs = {\n    init: function () {\n      this.tab_accordion();\n      this.tab_dropdown();\n      this.refresh_slider();\n      document.addEventListener('shopify:block:select', function (event) {\n        const tab_pane = event.target.closest('.tab-pane');\n        const tab = tab_pane && tab_pane.id ? document.querySelector('[data-bs-target=\"#' + tab_pane.id + '\"]') : false;\n        if (tab === false) {\n          return;\n        }\n        const tabInstance = bootstrap.Tab.getInstance(tab);\n        if (tabInstance) {\n          tabInstance.show();\n        } else {\n          new bootstrap.Tab(tab).show();\n        }\n      });\n    },\n    tab_accordion: function () {\n      $('[data-bs-toggle=\"tab-accordion\"] [data-bs-toggle=\"tab\"]').on('shown.bs.tab', function (event) {\n        var $currentTab = $(event.target),\n          $previousTab = $(event.relatedTarget),\n          $wrapper = $(this).closest('[data-bs-toggle=\"tab-accordion\"]'),\n          $currentPanel = $wrapper.find($currentTab.data('bs-target')),\n          $previousPanel = $wrapper.find($previousTab.data('bs-target'));\n        $currentPanel.find('.collapse').addClass('show');\n        $previousPanel.find('.collapse').removeClass('show');\n        $currentPanel.find('[data-bs-toggle=\"collapse\"]').removeClass('collapsed');\n        $previousPanel.find('[data-bs-toggle=\"collapse\"]').addClass('collapsed');\n      });\n      $('[data-bs-toggle=\"tab-accordion\"] .collapse').on('shown.bs.collapse', function (event) {\n        var $currentPane = $(event.target).closest('.tab-pane');\n        if ($currentPane.length) {\n          var $currentTab = $('[data-bs-target=\"#' + $currentPane.attr('id') + '\"]');\n          if ($currentTab.length) {\n            var $parentTabs = $currentTab.closest('.nav-tabs');\n            if ($parentTabs.length) {\n              $parentTabs.find('[data-bs-toggle=\"tab\"]').removeClass('active');\n              var $tabContent = $parentTabs.next('.tab-content');\n              if ($tabContent.length) {\n                $tabContent.find('.tab-pane').removeClass('show active');\n              }\n              $currentPane.addClass('show active');\n              $currentTab.addClass('active');\n            }\n          }\n        }\n      });\n    },\n    tab_dropdown: function () {\n      $('[data-bs-toggle=\"tab-dropdown\"] [data-bs-toggle=\"tab\"]').on('shown.bs.tab', function (event) {\n        var $currentTab = $(event.target),\n          $previousTab = $(event.relatedTarget),\n          $wrapper = $(this).closest('[data-bs-toggle=\"tab-dropdown\"]'),\n          target = $currentTab.data('bs-target');\n        $wrapper.find('[data-bs-toggle=\"tab\"]').removeClass('active');\n        $wrapper.find('[data-bs-target=\"' + target + '\"]').addClass('active');\n        $wrapper.find('[data-bs-toggle=\"dropdown\"]').text($currentTab.text());\n      });\n    },\n    refresh_slider: function () {\n      $('[data-bs-toggle=\"tab\"]').on('shown.bs.tab', function (event) {\n        var $navLink = $(event.target),\n          $tabContent = $($navLink.data('bs-target'));\n        $tabContent.find('.slick-slider').slick('refresh');\n        var hasAnimate = $tabContent.find('[data-animate]');\n        $tabContent.siblings().each(function () {\n          if ($(this).hasClass('active') !== true) {\n            hasAnimate.each(function () {\n              var dataAnimate = $(this).attr('data-animate');\n              if (dataAnimate.length) {\n                $(this).removeClass('animate__animated').removeClass('animate__' + dataAnimate);\n              }\n            });\n          }\n        });\n        if (hasAnimate.length) {\n          GSP.animation.init();\n        }\n      });\n    }\n  };\n  $(document).ready(function () {\n    GSP.tabs.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://shopify-glowing/./src/js/components/tabs.js?")},"./src/js/theme.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_theme_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/theme.scss */ "./src/scss/theme.scss");\n/* harmony import */ var _components_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/core */ "./src/js/components/core.js");\n/* harmony import */ var _components_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/animation */ "./src/js/components/animation.js");\n/* harmony import */ var _components_animation__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_components_animation__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_html_shifting__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/html-shifting */ "./src/js/components/html-shifting.js");\n/* harmony import */ var _components_html_shifting__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_components_html_shifting__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _components_sticky__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/sticky */ "./src/js/components/sticky.js");\n/* harmony import */ var _components_sticky__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_components_sticky__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _components_drift_zoom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/drift-zoom */ "./src/js/components/drift-zoom.js");\n/* harmony import */ var _components_drift_zoom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_components_drift_zoom__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _components_back_to_top__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/back-to-top */ "./src/js/components/back-to-top.js");\n/* harmony import */ var _components_back_to_top__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_components_back_to_top__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _components_bs_script__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/bs-script */ "./src/js/components/bs-script.js");\n/* harmony import */ var _components_bs_script__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_components_bs_script__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _components_dropdown__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/dropdown */ "./src/js/components/dropdown.js");\n/* harmony import */ var _components_dropdown__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_components_dropdown__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _components_gallery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/gallery */ "./src/js/components/gallery.js");\n/* harmony import */ var _components_gallery__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_components_gallery__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _components_isotope__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/isotope */ "./src/js/components/isotope.js");\n/* harmony import */ var _components_isotope__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_components_isotope__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _components_counter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/counter */ "./src/js/components/counter.js");\n/* harmony import */ var _components_counter__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_components_counter__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _components_prevent_transition__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/prevent-transition */ "./src/js/components/prevent-transition.js");\n/* harmony import */ var _components_prevent_transition__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_components_prevent_transition__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _components_tabs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/tabs */ "./src/js/components/tabs.js");\n/* harmony import */ var _components_tabs__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_components_tabs__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _components_header__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/header */ "./src/js/components/header.js");\n/* harmony import */ var _components_header__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_components_header__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _components_search__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/search */ "./src/js/components/search.js");\n/* harmony import */ var _components_search__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_components_search__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _components_collapse__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/collapse */ "./src/js/components/collapse.js");\n/* harmony import */ var _components_collapse__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_components_collapse__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _components_loading__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/loading */ "./src/js/components/loading.js");\n/* harmony import */ var _components_loading__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_components_loading__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _components_product_product__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/product/product */ "./src/js/components/product/product.js");\n/* harmony import */ var _components_function_function__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/function/function */ "./src/js/components/function/function.js");\n/* harmony import */ var _components_mapbox__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/mapbox */ "./src/js/components/mapbox.js");\n/* harmony import */ var _components_mapbox__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_components_mapbox__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var _components_register_assets__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/register-assets */ "./src/js/components/register-assets.js");\n/* harmony import */ var _components_register_assets__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_components_register_assets__WEBPACK_IMPORTED_MODULE_21__);\n// Stylesheet code\n\nwindow.gspThemeLibs.loadjs = gspTheme.helper.loadFileAssets();\n\n// Javascript code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://shopify-glowing/./src/js/theme.js?')},"./src/scss/theme.scss":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://shopify-glowing/./src/scss/theme.scss?")}},__webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(cachedModule!==void 0)return cachedModule.exports;var module=__webpack_module_cache__[moduleId]={exports:{}};return __webpack_modules__[moduleId](module,module.exports,__webpack_require__),module.exports}(function(){__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,{a:getter}),getter}})(),function(){__webpack_require__.d=function(exports,definition){for(var key in definition)__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)&&Object.defineProperty(exports,key,{enumerable:!0,get:definition[key]})}}(),function(){__webpack_require__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)}}(),function(){__webpack_require__.r=function(exports){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})}}();var __webpack_exports__=__webpack_require__("./src/js/theme.js")})();
//# sourceMappingURL=/cdn/shop/t/20/assets/theme.js.map?v=176853630673828563651751355100
